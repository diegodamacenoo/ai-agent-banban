'use server'

import { createSupabaseServerClient } from '@/core/supabase/server'
import { revalidatePath } from 'next/cache'

// Buscar estat√≠sticas de sess√µes da organiza√ß√£o
export async function getOrganizationSessionStats() {
  const supabase = await createSupabaseServerClient()
  
  try {
    const { data: { user } } = await supabase.auth.getUser()
    if (!user) {
      throw new Error('Usu√°rio n√£o autenticado')
    }

    const { data: profile } = await supabase
      .from('profiles')
      .select('organization_id, role')
      .eq('id', user.id)
      .single()

    // Verificar se tem permiss√£o (admin da org ou master_admin)
    if (!['organization_admin', 'master_admin'].includes(profile?.role || '')) {
      throw new Error('Sem permiss√£o para visualizar sess√µes')
    }

    // Master admins podem ver todas as organiza√ß√µes, outros precisam de org
    if (profile.role !== 'master_admin' && !profile?.organization_id) {
      throw new Error('Organiza√ß√£o n√£o encontrada')
    }

    // Buscar estat√≠sticas via fun√ß√£o RPC
    const { data: stats, error: statsError } = await supabase
      .rpc('get_session_analytics', {
        p_org_id: profile.role === 'master_admin' ? null : profile.organization_id,
        p_days_back: 7
      })

    if (statsError) {
      console.error('Erro nas estat√≠sticas:', statsError)
      throw statsError
    }

    return {
      success: true,
      data: stats || []
    }

  } catch (error: any) {
    console.error('Erro ao buscar estat√≠sticas:', error)
    return {
      success: false,
      error: error.message || 'Erro interno do servidor'
    }
  }
}

// Buscar sess√µes ativas da organiza√ß√£o
export async function getOrganizationActiveSessions() {
  const supabase = await createSupabaseServerClient()
  
  try {
    const { data: { user } } = await supabase.auth.getUser()
    if (!user) {
      throw new Error('Usu√°rio n√£o autenticado')
    }

    const { data: profile } = await supabase
      .from('profiles')
      .select('organization_id, role')
      .eq('id', user.id)
      .single()

    // Verificar permiss√£o
    if (!['organization_admin', 'master_admin'].includes(profile?.role || '')) {
      throw new Error('Sem permiss√£o para visualizar sess√µes')
    }

    // Master admins podem ver todas as organiza√ß√µes, outros precisam de org
    if (profile.role !== 'master_admin' && !profile?.organization_id) {
      throw new Error('Organiza√ß√£o n√£o encontrada')
    }

    // Buscar sess√µes ativas com dados do usu√°rio
    let sessionsQuery = supabase
      .from('user_sessions')
      .select(`
        id,
        user_id,
        created_at,
        updated_at,
        last_activity,
        device_info,
        geo_location,
        session_type,
        login_method,
        is_active,
        ip,
        user_agent,
        expires_at,
        security_flags,
        profiles!inner(
          first_name,
          last_name,
          role,
          organization_id
        )
      `)
      .eq('is_active', true)
      .order('last_activity', { ascending: false })
      .limit(100)

    // Apenas filtrar por organiza√ß√£o se n√£o for master_admin
    if (profile.role !== 'master_admin' && profile.organization_id) {
      sessionsQuery = sessionsQuery.eq('profiles.organization_id', profile.organization_id)
    }

    const { data: sessions, error: sessionsError } = await sessionsQuery

    if (sessionsError) {
      throw sessionsError
    }

    // Formatear dados para a UI
    const formattedSessions = sessions?.map(session => ({
      session_id: session.id,
      user_id: session.user_id,
      full_name: `${session.profiles?.first_name || ''} ${session.profiles?.last_name || ''}`.trim(),
      user_role: session.profiles?.role,
      created_at: session.created_at,
      last_activity: session.last_activity,
      device_info: session.device_info,
      geo_location: session.geo_location,
      session_type: session.session_type,
      login_method: session.login_method,
      is_active: session.is_active,
      ip: session.ip,
      user_agent: session.user_agent,
      expires_at: session.expires_at,
      security_flags: session.security_flags
    })) || []

    return {
      success: true,
      data: formattedSessions
    }

  } catch (error: any) {
    console.error('Erro ao buscar sess√µes:', error)
    return {
      success: false,
      error: error.message || 'Erro interno do servidor'
    }
  }
}

// Encerrar sess√£o espec√≠fica
export async function terminateSession(sessionId: string) {
  const supabase = await createSupabaseServerClient()
  
  try {
    // Log removido para limpar terminal
    
    const { data: { user } } = await supabase.auth.getUser()
    if (!user) {
      throw new Error('Usu√°rio n√£o autenticado')
    }

    const { data: profile } = await supabase
      .from('profiles')
      .select('organization_id, role')
      .eq('id', user.id)
      .single()

    // Log removido para limpar terminal

    // Verificar permiss√£o
    if (!['organization_admin', 'master_admin'].includes(profile?.role || '')) {
      throw new Error('Sem permiss√£o para encerrar sess√µes')
    }

    // Verificar se est√° tentando encerrar pr√≥pria sess√£o
    const { data: sessionToEnd } = await supabase
      .from('user_sessions')
      .select('user_id')
      .eq('id', sessionId)
      .single()

    if (sessionToEnd?.user_id === user.id) {
      console.debug('‚ö†Ô∏è Usu√°rio tentando encerrar pr√≥pria sess√£o')
      throw new Error('Voc√™ n√£o pode encerrar sua pr√≥pria sess√£o ativa. Use o logout normal.')
    }

    // Obter dados da sess√£o para invalidar JWT
    const { data: sessionData } = await supabase
      .from('user_sessions')
      .select('user_id')
      .eq('id', sessionId)
      .single()

    if (!sessionData) {
      throw new Error('Sess√£o n√£o encontrada')
    }

    const targetUserId = sessionData.user_id

    // 1. Marcar sess√£o como inativa na nossa tabela
    // Log removido para limpar terminal
    const { error: updateError } = await supabase
      .from('user_sessions')
      .update({ 
        is_active: false, 
        updated_at: new Date().toISOString(),
        security_flags: {
          ended_at: new Date().toISOString(),
          ended_reason: 'admin_termination'
        }
      })
      .eq('id', sessionId)

    if (updateError) {
      console.debug('‚ùå Erro ao marcar sess√£o como inativa:', updateError)
      throw updateError
    }

    // 2. Invalidar JWT usando nossa fun√ß√£o RPC (mais confi√°vel)
    // Log removido para limpar terminal
    try {
      const { data: rpcResult, error: rpcError } = await supabase.rpc('admin_delete_user_sessions', { 
        target_user_id: targetUserId 
      })
      
      if (rpcError) {
        console.debug('‚ùå Erro na fun√ß√£o RPC:', rpcError)
        throw rpcError
      } else {
        console.debug('‚úÖ Tokens JWT removidos via RPC. Resultado:', rpcResult)
      }
    } catch (error) {
      console.debug('‚ùå Falha cr√≠tica ao invalidar JWT:', error)
      // Mesmo com erro na invalida√ß√£o do JWT, continuamos pois a sess√£o foi marcada como inativa
      // Em production, isso deveria ser um alerta cr√≠tico
    }

    // 3. NOVO: Bloquear usu√°rio temporariamente para evitar race conditions
    console.debug('üîß Bloqueando usu√°rio temporariamente:', targetUserId)
    try {
      const { error: blockError } = await supabase.rpc('block_user_sessions', { 
        target_user_id: targetUserId,
        block_minutes: 10, // 10 minutos de bloqueio (para testes)
        block_reason: 'admin_session_termination'
      })
      
      if (blockError) {
        console.debug('‚ö†Ô∏è Aviso ao bloquear usu√°rio:', blockError)
      } else {
        console.debug('‚úÖ Usu√°rio bloqueado temporariamente por 10 minutos')
      }
    } catch (error) {
      console.debug('‚ö†Ô∏è Erro ao bloquear usu√°rio:', error)
    }

    // 4. FOR√áAR invalida√ß√£o adicional usando admin API
    console.debug('üîß Invalida√ß√£o adicional via admin API')
    try {
      // Invalidar todas as sess√µes JWT do usu√°rio diretamente
      const { error: adminError } = await supabase.auth.admin.signOut(targetUserId, 'global')
      
      if (adminError) {
        console.debug('‚ö†Ô∏è Erro na invalida√ß√£o admin:', adminError)
      } else {
        console.debug('‚úÖ Invalida√ß√£o global via admin API realizada')
      }
    } catch (error) {
      console.debug('‚ö†Ô∏è Erro na invalida√ß√£o admin:', error)
    }

    // 5. CRIAR marcador no localStorage para detectar bloqueio
    console.debug('üè∑Ô∏è Criando marcador de bloqueio no lado do cliente')
    try {
      // Salvar informa√ß√£o do bloqueio que ser√° detectada pelo middleware
      const blockInfo = {
        user_id: targetUserId,
        blocked_until: new Date(Date.now() + 10 * 60 * 1000).toISOString(), // 10 minutos
        reason: 'session_terminated',
        timestamp: Date.now()
      };
      
      // Em produ√ß√£o, isso seria feito via WebSocket ou Server-Sent Events
      // Por enquanto, log da informa√ß√£o que seria transmitida
      console.debug('üì° Informa√ß√£o de bloqueio a ser transmitida:', blockInfo)
      console.debug('‚úÖ Marcador de bloqueio preparado')
    } catch (error) {
      console.debug('‚ö†Ô∏è Erro ao preparar marcador:', error)
    }
    
    // 6. FOR√áAR limpeza de cache local do usu√°rio  
    console.debug('üóëÔ∏è Invalidando caches relacionados ao usu√°rio')
    try {
      // Limpar qualquer cache relacionado ao usu√°rio no Redis (se houver)
      // await redis.del(`user:${targetUserId}:*`);
      
      // Por enquanto, apenas log da a√ß√£o
      console.debug('‚úÖ Prepara√ß√£o para limpeza de cache conclu√≠da')
    } catch (error) {
      console.debug('‚ö†Ô∏è Erro na limpeza de cache:', error)
    }

    revalidatePath('/admin/audit')

    return {
      success: true,
      message: 'Sess√£o encerrada com sucesso'
    }

  } catch (error: any) {
    console.error('‚ùå Erro ao encerrar sess√£o:', error)
    console.debug('üîç Tipo do erro:', typeof error)
    console.debug('üîç Error.message:', error?.message)
    console.debug('üîç Error.toString():', error?.toString?.())
    console.debug('üîç JSON.stringify(error):', JSON.stringify(error))
    
    const errorMessage = error?.message || error?.toString() || 'Erro interno do servidor'
    console.debug('üìù Mensagem final que ser√° retornada:', errorMessage)
    
    const result = {
      success: false,
      error: errorMessage
    }
    console.debug('üöÄ Objeto result completo:', JSON.stringify(result))
    return result
  }
}

// Encerrar todas as sess√µes de um usu√°rio
export async function terminateAllUserSessions(userId: string, exceptSessionId?: string) {
  const supabase = await createSupabaseServerClient()
  
  try {
    const { data: { user } } = await supabase.auth.getUser()
    if (!user) {
      throw new Error('Usu√°rio n√£o autenticado')
    }

    const { data: profile } = await supabase
      .from('profiles')
      .select('organization_id, role')
      .eq('id', user.id)
      .single()

    // Verificar permiss√£o
    if (!['organization_admin', 'master_admin'].includes(profile?.role || '')) {
      throw new Error('Sem permiss√£o para encerrar sess√µes')
    }

    // Encerrar todas as sess√µes do usu√°rio via fun√ß√£o RPC
    const { data, error } = await supabase
      .rpc('end_all_user_sessions', {
        p_user_id: userId,
        p_except_session_id: exceptSessionId || null
      })

    if (error) {
      throw error
    }

    revalidatePath('/admin/audit')

    return {
      success: true,
      message: `${data || 0} sess√µes encerradas`,
      count: data || 0
    }

  } catch (error: any) {
    console.error('Erro ao encerrar sess√µes do usu√°rio:', error)
    return {
      success: false,
      error: error.message || 'Erro interno do servidor'
    }
  }
}

// Executar limpeza de sess√µes expiradas
export async function runSessionCleanup() {
  const supabase = await createSupabaseServerClient()
  
  try {
    const { data: { user } } = await supabase.auth.getUser()
    if (!user) {
      throw new Error('Usu√°rio n√£o autenticado')
    }

    const { data: profile } = await supabase
      .from('profiles')
      .select('role')
      .eq('id', user.id)
      .single()

    // Verificar permiss√£o (apenas master_admin)
    if (profile?.role !== 'master_admin') {
      throw new Error('Apenas master admins podem executar limpeza')
    }

    // Executar limpeza via fun√ß√£o RPC
    const { data, error } = await supabase
      .rpc('batch_cleanup_sessions')

    if (error) {
      throw error
    }

    const summary = data?.find((item: any) => item.operation === 'cleanup_summary')
    const processedCount = summary?.affected_count || 0

    revalidatePath('/admin/audit')

    return {
      success: true,
      message: `Limpeza conclu√≠da: ${processedCount} opera√ß√µes`,
      details: data || []
    }

  } catch (error: any) {
    console.error('Erro na limpeza de sess√µes:', error)
    return {
      success: false,
      error: error.message || 'Erro interno do servidor'
    }
  }
}

// Limpeza r√°pida de sess√µes expiradas
export async function cleanupExpiredSessions() {
  const supabase = await createSupabaseServerClient()
  
  try {
    const { data: { user } } = await supabase.auth.getUser()
    if (!user) {
      throw new Error('Usu√°rio n√£o autenticado')
    }

    const { data: profile } = await supabase
      .from('profiles')
      .select('role')
      .eq('id', user.id)
      .single()

    // Verificar permiss√£o (organization_admin ou master_admin)
    if (!['organization_admin', 'master_admin'].includes(profile?.role || '')) {
      throw new Error('Sem permiss√£o para executar limpeza')
    }

    // Executar limpeza via fun√ß√£o RPC
    const { data, error } = await supabase
      .rpc('cleanup_expired_sessions')

    if (error) {
      throw error
    }

    const cleanedCount = data || 0

    revalidatePath('/admin/audit')

    return {
      success: true,
      message: `Limpeza r√°pida conclu√≠da: ${cleanedCount} sess√µes expiradas removidas`,
      count: cleanedCount
    }

  } catch (error: any) {
    console.error('Erro na limpeza r√°pida:', error)
    return {
      success: false,
      error: error.message || 'Erro interno do servidor'
    }
  }
}

// Manuten√ß√£o programada de sess√µes
export async function runScheduledMaintenance() {
  const supabase = await createSupabaseServerClient()
  
  try {
    const { data: { user } } = await supabase.auth.getUser()
    if (!user) {
      throw new Error('Usu√°rio n√£o autenticado')
    }

    const { data: profile } = await supabase
      .from('profiles')
      .select('role')
      .eq('id', user.id)
      .single()

    // Verificar permiss√£o (apenas master_admin para manuten√ß√£o completa)
    if (profile?.role !== 'master_admin') {
      throw new Error('Apenas master admins podem executar manuten√ß√£o programada')
    }

    // Executar manuten√ß√£o via fun√ß√£o RPC
    const { data, error } = await supabase
      .rpc('scheduled_session_maintenance')

    if (error) {
      throw error
    }

    // Processar resultados da manuten√ß√£o
    const maintenanceResults = data || []
    const sessionCleanup = maintenanceResults.find((item: any) => item.operation === 'session_cleanup')
    const securityMonitoring = maintenanceResults.find((item: any) => item.operation === 'security_monitoring')
    const cacheRefresh = maintenanceResults.find((item: any) => item.operation === 'cache_refresh')

    revalidatePath('/admin/audit')

    return {
      success: true,
      message: 'Manuten√ß√£o programada conclu√≠da com sucesso',
      details: {
        sessionCleanup: sessionCleanup?.details || {},
        securityAlerts: securityMonitoring?.details || [],
        cacheUpdated: cacheRefresh?.details?.cache_updated || false,
        duration: cacheRefresh?.details?.duration_ms || 0
      }
    }

  } catch (error: any) {
    console.error('Erro na manuten√ß√£o programada:', error)
    return {
      success: false,
      error: error.message || 'Erro interno do servidor'
    }
  }
}

// Detectar sess√µes suspeitas
export async function detectSuspiciousSessions() {
  const supabase = await createSupabaseServerClient()
  
  try {
    const { data: { user } } = await supabase.auth.getUser()
    if (!user) {
      throw new Error('Usu√°rio n√£o autenticado')
    }

    const { data: profile } = await supabase
      .from('profiles')
      .select('organization_id, role')
      .eq('id', user.id)
      .single()

    // Verificar permiss√£o
    if (!['organization_admin', 'master_admin'].includes(profile?.role || '')) {
      throw new Error('Sem permiss√£o para an√°lise de seguran√ßa')
    }

    // Executar detec√ß√£o via fun√ß√£o RPC
    const { data, error } = await supabase
      .rpc('detect_suspicious_sessions')

    if (error) {
      throw error
    }

    // Filtrar apenas sess√µes da organiza√ß√£o atual
    const orgSuspiciousSessions = data?.filter((session: any) => {
      // Verificar se o usu√°rio pertence √† organiza√ß√£o
      // Como a fun√ß√£o n√£o filtra por org, vamos fazer isso depois
      return true // Por enquanto retornar todas
    }) || []

    return {
      success: true,
      data: orgSuspiciousSessions
    }

  } catch (error: any) {
    console.error('Erro ao detectar sess√µes suspeitas:', error)
    return {
      success: false,
      error: error.message || 'Erro interno do servidor'
    }
  }
}

// Buscar hist√≥rico de sess√µes de um usu√°rio espec√≠fico
export async function getUserSessionHistory(userId: string, limit = 20) {
  const supabase = await createSupabaseServerClient()
  
  try {
    const { data: { user } } = await supabase.auth.getUser()
    if (!user) {
      throw new Error('Usu√°rio n√£o autenticado')
    }

    const { data: profile } = await supabase
      .from('profiles')
      .select('organization_id, role')
      .eq('id', user.id)
      .single()

    // Verificar permiss√£o
    if (!['organization_admin', 'master_admin'].includes(profile?.role || '')) {
      throw new Error('Sem permiss√£o para visualizar hist√≥rico')
    }

    // Buscar hist√≥rico de sess√µes
    let historyQuery = supabase
      .from('user_sessions')
      .select(`
        id,
        created_at,
        updated_at,
        last_activity,
        device_info,
        geo_location,
        session_type,
        login_method,
        is_active,
        ip,
        expires_at,
        security_flags
      `)
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(limit)

    // Se n√£o for master_admin, filtrar por organiza√ß√£o
    if (profile.role !== 'master_admin' && profile.organization_id) {
      historyQuery = historyQuery.eq('organization_id', profile.organization_id)
    }

    const { data: sessions, error } = await historyQuery

    if (error) {
      throw error
    }

    return {
      success: true,
      data: sessions || []
    }

  } catch (error: any) {
    console.error('Erro ao buscar hist√≥rico:', error)
    return {
      success: false,
      error: error.message || 'Erro interno do servidor'
    }
  }
}