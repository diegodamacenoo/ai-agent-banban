
import { LucideIcon } from 'lucide-react';

/**
 * Representa uma seção no Guia de Desenvolvimento Interativo.
 */
export interface Section {
  id: string;
  name: string;
  shortName: string;
  description: string;
  status: 'pending' | 'in-progress' | 'completed' | 'warning' | 'error';
  icon: LucideIcon;
  completedSteps: number;
  totalSteps: number;
  estimatedTime?: string;
}

/**
 * Representa o progresso de uma seção individual (usado pelo ProgressTracker).
 * @deprecated Use a interface Section diretamente, que já contém os dados de progresso.
 */
export interface SectionProgress {
  id: string;
  name: string;
  status: 'pending' | 'in-progress' | 'completed' | 'warning' | 'error';
  completedSteps: number;
  totalSteps: number;
}

/**
 * Métricas de desenvolvimento exibidas no Dashboard.
 */
export interface DevelopmentMetrics {
  totalModules: number;
  activeImplementations: number;
  healthScore: number;
  orphanModules: number;
  implementationCoverage: number;
  lastDeployment: Date | null;
  systemUptime: string;
  criticalIssues: number;
}

/**
 * Preferências do usuário para o Guia de Desenvolvimento.
 */
export interface DevelopmentGuidePreferences {
  autoSave: boolean;
  showAnimations: boolean;
  compactMode: boolean;
  debugMode: boolean;
}

/**
 * Objeto de retorno do hook useDevelopmentGuide.
 */
export interface UseDevelopmentGuideReturn {
  sections: Section[];
  currentSection: string;
  setCurrentSection: (sectionId: string) => void;
  progress: {
    totalSteps: number;
    completedSteps: number;
    percentage: number;
  };
  updateSectionProgress: (sectionId: string, completed: number, total: number) => void;
  isLoading: boolean;
  preferences: DevelopmentGuidePreferences;
  updatePreferences: (prefs: Partial<DevelopmentGuidePreferences>) => void;
}

/**
 * Sistema de Tracking Estrutural - Fase 2
 */

/**
 * Regra de validação para verificação estrutural.
 */
export interface ValidationRule {
  type: 'exists' | 'content' | 'schema' | 'format' | 'dependency';
  condition: string;
  errorMessage: string;
  suggestion?: string;
  autoFix?: boolean;
}

/**
 * Item de verificação estrutural de módulo.
 */
export interface ModuleStructureCheck {
  id: string;
  name: string;
  description: string;
  required: boolean;
  category: 'files' | 'folders' | 'config' | 'dependencies' | 'database';
  path: string;
  status: 'pending' | 'validating' | 'valid' | 'invalid' | 'warning' | 'skipped';
  validationRules: ValidationRule[];
  autoFix?: boolean;
  priority: 'critical' | 'high' | 'medium' | 'low';
  estimatedTime?: string;
  lastChecked?: Date;
}

/**
 * Categoria de verificações estruturais.
 */
export interface StructuralCategory {
  id: string;
  name: string;
  description: string;
  icon: LucideIcon;
  checks: ModuleStructureCheck[];
  overallStatus: 'pending' | 'validating' | 'valid' | 'invalid' | 'warning';
  completedChecks: number;
  totalChecks: number;
  criticalIssues: number;
}

/**
 * Resultado da validação estrutural.
 */
export interface ValidationResult {
  checkId: string;
  status: 'valid' | 'invalid' | 'warning' | 'error';
  message: string;
  details?: string[];
  suggestions?: string[];
  timestamp: Date;
  executionTime: number;
}

/**
 * Estado global do sistema de tracking estrutural.
 */
export interface StructuralTrackingState {
  categories: StructuralCategory[];
  overallProgress: {
    completed: number;
    total: number;
    percentage: number;
  };
  healthScore: number;
  criticalIssues: ModuleStructureCheck[];
  lastValidation: Date | null;
  isValidating: boolean;
  autoValidation: boolean;
}

/**
 * Configuração para validação de módulo específico.
 */
export interface ModuleValidationConfig {
  moduleType: 'standard' | 'custom' | 'integration';
  clientType?: 'banban' | 'riachuelo' | 'ca' | 'generic';
  enabledCategories: string[];
  customChecks?: ModuleStructureCheck[];
  skipOptional: boolean;
}

/**
 * Module Creation Wizard - Fase 3
 */

/**
 * Tipos de módulo disponíveis para criação.
 */
export type ModuleType = 'standard' | 'custom';

/**
 * Tipos de cliente suportados.
 */
export type ClientType = 'banban' | 'riachuelo' | 'ca' | 'generic';

/**
 * Steps disponíveis no wizard de criação.
 */
export type WizardStep = 'module-type' | 'basic-config' | 'implementation-config' | 'client-config' | 'final-review';

/**
 * Status de validação de um step do wizard.
 */
export type StepValidationStatus = 'valid' | 'invalid' | 'pending' | 'warning';

/**
 * Campos auto-gerados baseados no nome do módulo.
 */
export interface AutoGeneratedFields {
  slug: string;
  implementation_key: string;
  component_path: string;
}

/**
 * Configuração básica do módulo.
 */
export interface BasicModuleConfig {
  name: string;
  slug: string;
  description: string;
  version: string;
  category: string;
  icon: string;
  route_pattern: string;
  supports_multi_tenant: boolean;
  exclusive_tenant_id: string | null;
  auto_create_standard: boolean;
  tags: string[];
}

/**
 * Configuração específica do cliente (apenas para módulos custom).
 */
export interface ClientSpecificConfig {
  clientType: ClientType;
  customizations: {
    colors?: Record<string, string>;
    branding?: {
      logo?: string;
      primaryColor?: string;
      secondaryColor?: string;
    };
    features?: string[];
    integrations?: string[];
  };
  requirements?: string[];
}

/**
 * Opções avançadas do módulo.
 */
export interface AdvancedModuleOptions {
  database: {
    requiresNewTables: boolean;
    tables?: string[];
    migrations?: boolean;
  };
  api: {
    hasEndpoints: boolean;
    endpoints?: string[];
    requiresAuth: boolean;
  };
  frontend: {
    hasUI: boolean;
    pageType?: 'single' | 'multi' | 'widget';
    permissions?: string[];
  };
  dependencies: {
    external: string[];
    internal: string[];
  };
  deployment: {
    environment: 'development' | 'staging' | 'production';
    autoValidation: boolean;
    runTests: boolean;
  };
}

/**
 * Configuração completa do módulo sendo criado.
 */
export interface ModuleCreationConfig {
  type: ModuleType;
  basic: BasicModuleConfig;
  client?: ClientSpecificConfig;
  advanced: AdvancedModuleOptions;
  auto_generated?: AutoGeneratedFields;
  flow_config?: {
    skip_implementation_config?: boolean;
    skip_client_config?: boolean;
  };
  metadata: {
    createdAt: Date;
    createdBy: string;
    estimatedTime: number;
    complexity: 'simple' | 'medium' | 'complex';
  };
}

/**
 * Definição de um step do wizard.
 */
export interface WizardStepDefinition {
  id: WizardStep;
  title: string;
  description: string;
  icon: LucideIcon;
  isOptional: boolean;
  estimatedTime: string;
  validationSchema?: any; // Pode ser expandido com schema específico
  dependencies?: WizardStep[];
}

/**
 * Estado do wizard de criação.
 */
export interface WizardState {
  currentStep: WizardStep;
  steps: WizardStepDefinition[];
  config: Partial<ModuleCreationConfig>;
  validation: Record<WizardStep, StepValidationStatus>;
  visitedSteps: Set<WizardStep>; // Track which steps user has visited
  progress: {
    currentStepIndex: number;
    totalSteps: number;
    percentage: number;
  };
  canProceed: boolean;
  canGoBack: boolean;
  errors: Record<string, string[]>;
  warnings: Record<string, string[]>;
}

/**
 * Template de arquivo para geração de código.
 */
export interface FileTemplate {
  path: string;
  name: string;
  content: string;
  variables: Record<string, any>;
  encoding?: 'utf8' | 'binary';
  executable?: boolean;
}

/**
 * Template completo de módulo.
 */
export interface ModuleTemplate {
  id: string;
  name: string;
  description: string;
  moduleType: ModuleType;
  clientType?: ClientType;
  version: string;
  files: FileTemplate[];
  directories: string[];
  dependencies: string[];
  scripts?: Record<string, string>;
  postGeneration?: {
    commands: string[];
    instructions: string[];
  };
}

/**
 * Resultado da geração de código.
 */
export interface CodeGenerationResult {
  success: boolean;
  generatedFiles: {
    path: string;
    size: number;
    status: 'created' | 'updated' | 'skipped' | 'error';
  }[];
  errors: string[];
  warnings: string[];
  summary: {
    totalFiles: number;
    totalDirectories: number;
    estimatedTime: number;
    nextSteps: string[];
  };
}

/**
 * Sugestão inteligente baseada em contexto.
 */
export interface SmartSuggestion {
  id: string;
  type: 'naming' | 'dependency' | 'configuration' | 'best-practice' | 'integration';
  title: string;
  description: string;
  suggestion: string;
  confidence: number; // 0-1
  reasons: string[];
  action?: {
    type: 'auto-apply' | 'manual' | 'link';
    data: any;
  };
}
