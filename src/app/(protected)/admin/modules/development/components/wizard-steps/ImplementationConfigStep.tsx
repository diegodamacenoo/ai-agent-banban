'use client';

import { useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Button } from '@/shared/ui/button';
import { Badge } from '@/shared/ui/badge';
import { 
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage
} from '@/shared/ui/form';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/shared/ui/select';
import { Input } from '@/shared/ui/input';
import { Textarea } from '@/shared/ui/textarea';
import { Checkbox } from '@/shared/ui/checkbox';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/shared/ui/tooltip';
import { Card, CardContent, CardHeader, CardTitle } from '@/shared/ui/card';
import { Info, Loader2, Settings, Wrench, CheckCircle2, AlertCircle, Save, Sparkles } from 'lucide-react';
import { useModuleWizardContext } from '../../../contexts/ModuleWizardContext';
import { createModuleImplementation } from '@/app/actions/admin/modules/module-implementations';
import { CreateModuleImplementationSchema, CreateModuleImplementationInput } from '@/app/actions/admin/modules/schemas';

// Import dos componentes e hooks
import { useSystemConfig } from '../../../hooks/useSystemConfig';
import { AutoConfigSwitch } from '../../../components/shared/AutoConfigSwitch';

/**
 * Step 4: Configura√ß√£o da implementa√ß√£o do m√≥dulo.
 */
export function ImplementationConfigStep() {
  const { state, nextStep, updateConfig } = useModuleWizardContext();
  const [error, setError] = useState<string | null>(null);
  
  // Configura√ß√µes do sistema
  const { config: systemConfig, isVersioningEnabled, defaultLifecycle } = useSystemConfig();
  const [isVersionAuto, setIsVersionAuto] = useState(true);
  const [isStatusAuto, setIsStatusAuto] = useState(true);
  const [customImplementationKey, setCustomImplementationKey] = useState(false);
  const [customComponentPath, setCustomComponentPath] = useState(false);
  const [customVersion, setCustomVersion] = useState(false);
  
  const config = state.config;
  const moduleSlug = config.basic?.slug || '';
  const moduleName = config.basic?.name || '';

  const form = useForm<CreateModuleImplementationInput>({
    resolver: zodResolver(CreateModuleImplementationSchema.omit({ base_module_id: true })),
    defaultValues: {
      base_module_id: '', // Ser√° preenchido ap√≥s criar o base module
      name: `${moduleName} - Implementa√ß√£o`,
      implementation_key: `${moduleSlug}-impl`,
      description: `Implementa√ß√£o espec√≠fica do m√≥dulo ${moduleName}`,
      version: '1.0.0',
      component_type: 'file',
      component_path: `${moduleSlug}Implementation`,
      audience: 'generic',
      complexity: 'standard',
      priority: 'medium',
      status: 'active',
      is_default: true, // Sempre true - primeira implementa√ß√£o √© sempre padr√£o
      template_type: 'dashboard',
      template_config: {},
      config_schema_override: {},
    },
  });

  // Atualizar valores padr√£o quando config muda (sem causar loops)
  useEffect(() => {
    const baseModuleId = (state.config as any).created_base_module_id;
    const autoGenerated = state.config.auto_generated;
    
    const newDefaults = {
      base_module_id: baseModuleId || '',
      name: `${moduleName} - Implementa√ß√£o`,
      implementation_key: autoGenerated?.implementation_key || `${moduleSlug}-impl`,
      description: `Implementa√ß√£o espec√≠fica do m√≥dulo ${moduleName}`,
      component_path: autoGenerated?.component_path || `${moduleSlug}Implementation`,
      version: config.basic?.version || '1.0.0',
      audience: 'generic',
      is_default: true, // Sempre true - primeira implementa√ß√£o √© sempre padr√£o
    };

    console.debug('üî• Definindo valores padr√£o com auto-generated:', newDefaults);
    
    // Apenas definir valores se realmente mudaram para evitar loops
    Object.entries(newDefaults).forEach(([key, value]) => {
      const currentValue = form.getValues(key as keyof CreateModuleImplementationInput);
      if (currentValue !== value) {
        form.setValue(key as keyof CreateModuleImplementationInput, value as any, { shouldTouch: false });
      }
    });
  }, [moduleSlug, moduleName, config.basic?.version]); // Removidas depend√™ncias que podem causar loop



  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="text-center space-y-2">
        <h3 className="text-lg font-semibold">Configura√ß√£o de Implementa√ß√£o</h3>
        <p className="text-muted-foreground">
          Configure como o m√≥dulo "{moduleName}" ser√° implementado tecnicamente. Estas configura√ß√µes ser√£o usadas na cria√ß√£o final.
        </p>
      </div>


      {/* Error Display */}
      {error && (
        <Card className="border-red-200 bg-red-50">
          <CardContent className="pt-6">
            <div className="flex items-center gap-2 text-red-800">
              <AlertCircle className="h-5 w-5" />
              <div>
                <p className="font-medium">Erro ao criar implementa√ß√£o</p>
                <p className="text-sm">{error}</p>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Coluna Esquerda - Informa√ß√µes B√°sicas */}
        <div className="space-y-6">
          <Form {...form}>
            <div className="space-y-6">
              
              {/* Debug: Mostrar erros de valida√ß√£o */}
              {Object.keys(form.formState.errors).length > 0 && (
                <Card className="border-red-200 bg-red-50">
                  <CardContent className="pt-4">
                    <h4 className="font-medium text-red-800">Erros de Valida√ß√£o:</h4>
                    <pre className="text-xs text-red-700 mt-1">
                      {JSON.stringify(form.formState.errors, null, 2)}
                    </pre>
                  </CardContent>
                </Card>
              )}

              {/* Informa√ß√µes B√°sicas */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Info className="h-5 w-5" />
                    Informa√ß√µes B√°sicas
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <FormField
                    control={form.control}
                    name="name"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Nome da Implementa√ß√£o</FormLabel>
                        <FormControl>
                          <Input placeholder="Ex: Performance Analytics - Implementa√ß√£o Banban" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="description"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Descri√ß√£o</FormLabel>
                        <FormControl>
                          <Textarea placeholder="Descreva o prop√≥sito e as funcionalidades desta implementa√ß√£o espec√≠fica." {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </CardContent>
              </Card>
            </div>
          </Form>
        </div>

        {/* Coluna Direita - Configura√ß√µes T√©cnicas */}
        <div className="space-y-6">
          <Form {...form}>
            <div className="space-y-6">

              {/* Configura√ß√µes T√©cnicas */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Wrench className="h-5 w-5" />
                    Configura√ß√µes T√©cnicas
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                    <FormField
                      control={form.control}
                      name="implementation_key"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="flex items-center gap-2">
                            Chave da Implementa√ß√£o
                            <Badge variant="outline" className="text-xs">Auto-gerado</Badge>
                            <TooltipProvider>
                              <Tooltip>
                                <TooltipTrigger asChild>
                                  <Info className="h-3 w-3 text-muted-foreground hover:text-blue-600 transition-colors cursor-help" />
                                </TooltipTrigger>
                                <TooltipContent>
                                  <p className="max-w-xs">
                                    Identificador t√©cnico √∫nico para esta implementa√ß√£o. Gerado automaticamente baseado no nome do m√≥dulo.
                                    <br />
                                    Ex: <code>alerts-impl</code>, <code>performance-analytics-impl</code>
                                  </p>
                                </TooltipContent>
                              </Tooltip>
                            </TooltipProvider>
                          </FormLabel>
                          <FormControl>
                            <div className="flex items-center gap-2">
                              <Input 
                                {...field} 
                                disabled={!customImplementationKey}
                                className={`${!customImplementationKey ? 'bg-gray-50' : ''}`}
                                value={customImplementationKey ? field.value : (state.config.auto_generated?.implementation_key || field.value)}
                              />
                              <Button
                                type="button"
                                variant="outline"
                                size="sm"
                                onClick={() => setCustomImplementationKey(!customImplementationKey)}
                              >
                                {customImplementationKey ? 'Auto' : 'Personalizar'}
                              </Button>
                            </div>
                          </FormControl>
                          <p className="text-xs text-muted-foreground">
                            Gerado automaticamente baseado no nome do m√≥dulo
                          </p>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={form.control}
                      name="version"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="flex items-center gap-2">
                            Vers√£o
                            <Badge variant="outline" className="text-xs">Herdado</Badge>
                          </FormLabel>
                          <FormControl>
                            <div className="flex items-center gap-2">
                              <Input
                                {...field}
                                disabled={!customVersion}
                                className={`${!customVersion ? 'bg-gray-50' : ''}`}
                                value={customVersion ? field.value : (config.basic?.version || '1.0.0')}
                                placeholder="1.0.0"
                              />
                              <Button
                                type="button"
                                variant="outline"
                                size="sm"
                                onClick={() => setCustomVersion(!customVersion)}
                              >
                                {customVersion ? 'Herdar' : 'Personalizar'}
                              </Button>
                            </div>
                          </FormControl>
                          <p className="text-xs text-muted-foreground">
                            Herdada do m√≥dulo base ({config.basic?.version || '1.0.0'})
                          </p>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                </CardContent>
              </Card>

              {/* Configura√ß√µes de Sistema */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Settings className="h-5 w-5" />
                    Configura√ß√µes de Sistema
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <FormField
                    control={form.control}
                    name="component_path"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="flex items-center gap-2">
                          Componente
                          <Badge variant="outline" className="text-xs">Auto-gerado</Badge>
                          <TooltipProvider>
                            <Tooltip>
                              <TooltipTrigger asChild>
                                <Info className="h-3 w-3 text-muted-foreground hover:text-blue-600 transition-colors cursor-help" />
                              </TooltipTrigger>
                              <TooltipContent>
                                <p className="max-w-sm">
                                  Define como localizar o componente React desta implementa√ß√£o. Gerado automaticamente baseado no slug do m√≥dulo.
                                  <br /><br />
                                  Exemplo: Para m√≥dulo "alerts", gera <code>alertsImplementation</code>
                                </p>
                              </TooltipContent>
                            </Tooltip>
                          </TooltipProvider>
                        </FormLabel>
                        <FormControl>
                          <div className="flex items-center gap-2">
                            <Input 
                              {...field}
                              disabled={!customComponentPath}
                              className={`${!customComponentPath ? 'bg-gray-50' : ''}`}
                              value={customComponentPath ? field.value : (state.config.auto_generated?.component_path || field.value)}
                              placeholder="Ex: alertsImplementation"
                            />
                            <Button
                              type="button"
                              variant="outline"
                              size="sm"
                              onClick={() => setCustomComponentPath(!customComponentPath)}
                            >
                              {customComponentPath ? 'Auto' : 'Personalizar'}
                            </Button>
                          </div>
                        </FormControl>
                        <p className="text-xs text-muted-foreground">
                          Path para localizar o componente React
                        </p>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="audience"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>P√∫blico-Alvo</FormLabel>
                        <Select onValueChange={field.onChange} defaultValue={field.value}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="generic">Gen√©rico</SelectItem>
                            <SelectItem value="client-specific">Cliente Espec√≠fico</SelectItem>
                            <SelectItem value="enterprise">Enterprise</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="is_default"
                    render={({ field }) => (
                      <FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4">
                        <FormControl>
                          <Checkbox
                            checked={field.value}
                            onCheckedChange={field.onChange}
                          />
                        </FormControl>
                        <div className="space-y-1 leading-none">
                          <FormLabel>Implementa√ß√£o Padr√£o</FormLabel>
                          <p className="text-sm text-muted-foreground">
                            Marque se esta deve ser a implementa√ß√£o padr√£o para o m√≥dulo base.
                            <br />
                            <span className="text-xs text-blue-600 font-medium">
                              Recomendado: Deixe marcado se esta √© a primeira implementa√ß√£o.
                            </span>
                          </p>
                        </div>
                      </FormItem>
                    )}
                  />
                </CardContent>
              </Card>

            </div>
          </Form>
        </div>
      </div>
    </div>
  );
}