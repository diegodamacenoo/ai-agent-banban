'use server';

import { createSupabaseServerClient } from "@/core/supabase/server";
import { CoreModule, ModuleMaturity } from "@/shared/types/module-catalog";
import { OrphanModule } from "@/shared/types/module-system";
import { revalidatePath } from "next/cache";
import { ModuleDiscoveryService } from "@/core/services/module-discovery";

export async function getAvailableModules(): Promise<{ success: boolean; data?: CoreModule[]; error?: string }> {
  console.debug('üìä [ModuleCatalog] Buscando m√≥dulos dispon√≠veis...');
  const supabase = await createSupabaseServerClient();
  
  try {
    console.debug('üîç [ModuleCatalog] Consultando banco de dados...');
    const { data, error } = await supabase
      .from('core_modules')
      .select('*')
      .eq('is_deleted', false) // Filtrar apenas m√≥dulos n√£o deletados
      .order('name', { ascending: true });

    if (error) {
      console.error('‚ùå [ModuleCatalog] Erro ao buscar m√≥dulos:', error);
      return { success: false, error: error.message };
    }

    console.debug('‚úÖ [ModuleCatalog] M√≥dulos encontrados (excluindo deletados):', data?.length);
    console.debug('üìã [ModuleCatalog] Dados:', data);

    return { success: true, data: data as CoreModule[] };
  } catch (e: any) {
    console.error('üí• [ModuleCatalog] Erro inesperado:', e);
    return { success: false, error: e.message || 'An unexpected error occurred' };
  }
}

export async function updateModuleMaturity(moduleId: string, maturity: ModuleMaturity): Promise<{ success: boolean; error?: string }> {
  const supabase = await createSupabaseServerClient();

  try {
    const { error } = await supabase
      .from('core_modules')
      .update({ maturity_status: maturity, updated_at: new Date().toISOString() })
      .eq('id', moduleId);

    if (error) {
      console.error(`Error updating module ${moduleId} to maturity ${maturity}:`, error);
      return { success: false, error: error.message };
    }

    // Revalida o path para garantir que a UI seja atualizada
    revalidatePath('/admin/modules');

    return { success: true };
  } catch (e: any) {
    console.error('Unexpected error in updateModuleMaturity:', e);
    return { success: false, error: e.message || 'An unexpected error occurred' };
  }
}

export async function getModuleById(moduleId: string): Promise<{ success?: boolean; data?: CoreModule; error?: string }> {
  console.debug('üìä [ModuleCatalog] Buscando m√≥dulo por ID:', moduleId);
  const supabase = await createSupabaseServerClient();
  
  try {
    console.debug('üîç [ModuleCatalog] Consultando banco de dados...');
    const { data, error } = await supabase
      .from('core_modules')
      .select('*')
      .eq('id', moduleId)
      .single();

    if (error) {
      console.error('‚ùå [ModuleCatalog] Erro ao buscar m√≥dulo:', error);
      return { error: error.message };
    }

    if (!data) {
      console.warn('‚ö†Ô∏è [ModuleCatalog] M√≥dulo n√£o encontrado:', moduleId);
      return { error: 'M√≥dulo n√£o encontrado' };
    }

    console.debug('‚úÖ [ModuleCatalog] M√≥dulo encontrado:', data);
    return { data: data as CoreModule };
  } catch (e: any) {
    console.error('üí• [ModuleCatalog] Erro inesperado:', e);
    return { error: e.message || 'An unexpected error occurred' };
  }
}

export async function detectOrphanModules(): Promise<{ success: boolean; data?: OrphanModule[]; error?: string }> {
  console.debug('üîç [ModuleCatalog] Iniciando detec√ß√£o de m√≥dulos √≥rf√£os...');
  
  try {
    const moduleDiscovery = new ModuleDiscoveryService();
    console.debug('‚ú® [ModuleCatalog] Servi√ßo de detec√ß√£o instanciado');
    
    const orphans = await moduleDiscovery.detectOrphanModules();
    console.debug('üìä [ModuleCatalog] √ìrf√£os detectados:', orphans);

    return { success: true, data: orphans };
  } catch (e: any) {
    console.error('üí• [ModuleCatalog] Erro ao detectar m√≥dulos √≥rf√£os:', e);
    return { success: false, error: e.message || 'An unexpected error occurred' };
  }
}

export async function getDeletedModules(): Promise<{ success: boolean; data?: CoreModule[]; error?: string }> {
  console.debug('üóëÔ∏è [ModuleCatalog] Buscando m√≥dulos deletados...');
  const supabase = await createSupabaseServerClient();
  
  try {
    console.debug('üîç [ModuleCatalog] Consultando m√≥dulos deletados...');
    const { data, error } = await supabase
      .from('core_modules')
      .select('*')
      .eq('is_deleted', true) // Buscar apenas m√≥dulos deletados
      .order('deleted_at', { ascending: false }); // Mais recentes primeiro

    if (error) {
      console.error('‚ùå [ModuleCatalog] Erro ao buscar m√≥dulos deletados:', error);
      return { success: false, error: error.message };
    }

    console.debug('‚úÖ [ModuleCatalog] M√≥dulos deletados encontrados:', data?.length);
    console.debug('üìã [ModuleCatalog] Dados:', data);

    return { success: true, data: data as CoreModule[] };
  } catch (e: any) {
    console.error('üí• [ModuleCatalog] Erro inesperado:', e);
    return { success: false, error: e.message || 'An unexpected error occurred' };
  }
} 