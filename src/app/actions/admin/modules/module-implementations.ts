'use server';

import { createSupabaseServerClient } from '@/core/supabase/server';
import { revalidatePath } from 'next/cache';
import {
  ActionResult,
  ModuleImplementation,
  CreateModuleImplementationInput,
  UpdateModuleImplementationInput,
  CreateModuleImplementationSchema,
  UpdateModuleImplementationSchema,
} from './schemas';
import { verifyAdminAccess } from './utils';
import { trackServerCall } from './call-tracker';
import { 
  conditionalAuditLog, 
  conditionalDebugLog, 
  checkMaintenanceMode,
  getConfigValue 
} from './system-config-utils';

// Helper para consolidar revalida√ß√µes e evitar calls redundantes
function revalidateImplementationsPaths() {
  revalidatePath('/admin/modules', 'layout');
}

// ================================================
// SERVER ACTIONS - MODULE IMPLEMENTATIONS
// ================================================

/**
 * Listar implementa√ß√µes com filtros
 */
export async function getModuleImplementations(
  filters: {
    base_module_id?: string;
    search?: string;
    audience?: 'generic' | 'client-specific' | 'enterprise';
    complexity?: 'basic' | 'standard' | 'advanced' | 'enterprise';
    includeArchivedModules?: boolean;
    includeDeletedModules?: boolean;
    page?: number;
    limit?: number;
  } = {}
): Promise<ActionResult<{ implementations: ModuleImplementation[]; total: number; pages: number }>> {
  try {
    trackServerCall('‚öôÔ∏è SERVER: getModuleImplementations', filters);
    
    // Verificar autentica√ß√£o
    const { isAuthenticated, isAdmin } = await verifyAdminAccess();
    
    if (!isAuthenticated) {
      return { success: false, error: 'Usu√°rio n√£o autenticado' };
    }
    
    if (!isAdmin) {
      return { success: false, error: 'Acesso negado. Apenas administradores podem visualizar implementa√ß√µes' };
    }

    const supabase = await createSupabaseServerClient();
    const { page = 1, limit = 50 } = filters;

    // Vers√£o defensiva que funciona mesmo se a tabela n√£o existir
    try {
      // Construir query base com informa√ß√µes do m√≥dulo base
      let query = supabase
        .from('module_implementations')
        .select(`
          id,
          base_module_id,
          implementation_key,
          name,
          description,
          version,
          component_type,
          template_type,
          component_path,
          audience,
          complexity,
          priority,
          status,
          is_default,
          is_active,
          created_at,
          updated_at,
          base_module:base_modules (
            id,
            name,
            slug,
            archived_at,
            deleted_at
          )
        `, { count: 'exact' })
        .order('created_at', { ascending: false });

      // Aplicar filtros
      if (filters.base_module_id) {
        query = query.eq('base_module_id', filters.base_module_id);
      }

      if (filters.search) {
        query = query.or(`name.ilike.%${filters.search}%,description.ilike.%${filters.search}%,implementation_key.ilike.%${filters.search}%`);
      }

      if (filters.audience) {
        query = query.eq('audience', filters.audience);
      }

      if (filters.complexity) {
        query = query.eq('complexity', filters.complexity);
      }

      // Implementa√ß√µes n√£o t√™m soft delete - sempre retornar todas as ativas

      // Filtrar por status do m√≥dulo base pai
      if (!filters.includeArchivedModules) {
        query = query.is('base_modules.archived_at', null);
      }
      if (!filters.includeDeletedModules) {
        query = query.is('base_modules.deleted_at', null);
      }

      // Aplicar pagina√ß√£o
      const from = (page - 1) * limit;
      const to = from + limit - 1;
      query = query.range(from, to);

      const { data: implementations, count, error } = await query;

      if (error) {
        console.warn('Erro ao buscar implementa√ß√µes:', error);
        // Retornar dados vazios em caso de erro
        return {
          success: true,
          data: {
            implementations: [],
            total: 0,
            pages: 0
          }
        };
      }

      const total = count || 0;
      const pages = Math.ceil(total / limit);

      return {
        success: true,
        data: {
          implementations: implementations || [],
          total,
          pages,
        },
      };

    } catch (tableError) {
      console.error('Erro ao acessar tabela module_implementations:', tableError);
      return { 
        success: false, 
        error: 'Erro ao acessar tabela de implementa√ß√µes. Verifique se a migra√ß√£o foi executada corretamente.' 
      };
    }

  } catch (error) {
    console.error('Erro em getModuleImplementations:', error);
    return { success: false, error: 'Erro interno do servidor' };
  }
}

/**
 * Gerar componente a partir de template
 */
async function generateComponentFromTemplate(
  implementationId: string, 
  templateType: string, 
  templateConfig: Record<string, any>
): Promise<void> {
  try {
    // TODO: Implementar engine de gera√ß√£o de template
    // Por enquanto, apenas log do que seria gerado
    await conditionalDebugLog('Gerando componente', {
      implementationId,
      templateType,
      templateConfig,
    });

    // Futura implementa√ß√£o:
    // 1. Ler template base do sistema de arquivos
    // 2. Processar configura√ß√£o e gerar c√≥digo React
    // 3. Salvar arquivo no local correto
    // 4. Atualizar component_path na implementa√ß√£o
    
  } catch (error) {
    console.error('Erro ao gerar componente:', error);
    // N√£o falhar a cria√ß√£o da implementa√ß√£o por erro de gera√ß√£o
  }
}

/**
 * Criar nova implementa√ß√£o de m√≥dulo
 */
export async function createModuleImplementation(input: CreateModuleImplementationInput): Promise<ActionResult<ModuleImplementation>> {
  try {
    console.debug('üî• createModuleImplementation iniciado com input:', input);
    
    // Verificar modo de manuten√ß√£o
    const { inMaintenance, message } = await checkMaintenanceMode();
    if (inMaintenance) {
      console.debug('üî• Sistema em manuten√ß√£o');
      return { success: false, error: message || 'Sistema em manuten√ß√£o' };
    }

    // Verificar autentica√ß√£o e permiss√µes
    console.debug('üî• Verificando autentica√ß√£o...');
    const { isAuthenticated, isAdmin, user } = await verifyAdminAccess();
    
    if (!isAuthenticated) {
      console.debug('üî• Usu√°rio n√£o autenticado');
      return { success: false, error: 'Usu√°rio n√£o autenticado' };
    }
    
    if (!isAdmin) {
      console.debug('üî• Usu√°rio n√£o √© admin');
      return { success: false, error: 'Acesso negado. Apenas administradores podem criar implementa√ß√µes' };
    }
    
    console.debug('üî• Autentica√ß√£o OK, usu√°rio:', user?.id);

    // Verificar se cria√ß√£o de novos m√≥dulos requer aprova√ß√£o
    const requireApproval = await getConfigValue('requireApprovalForNewModules');
    if (requireApproval) {
      // Para implementa√ß√µes, verificar se √© uma extens√£o de m√≥dulo existente
      await conditionalDebugLog('Verificando necessidade de aprova√ß√£o para nova implementa√ß√£o', { 
        userId: user?.id, 
        requireApproval 
      });
    }

    // Debug log se habilitado
    await conditionalDebugLog('createModuleImplementation iniciado', { input, userId: user?.id });

    // Validar entrada
    console.debug('üî• Validando entrada...');
    const validation = CreateModuleImplementationSchema.safeParse(input);
    if (!validation.success) {
      console.debug('üî• Erro de valida√ß√£o:', validation.error.issues);
      return { 
        success: false, 
        error: `Dados inv√°lidos: ${validation.error.issues.map(i => i.message).join(', ')}` 
      };
    }

    console.debug('üî• Valida√ß√£o OK');
    const data = validation.data;
    const supabase = await createSupabaseServerClient();

    // Verificar se o base_module_id existe
    console.debug('üî• Verificando se base_module_id existe:', data.base_module_id);
    const { data: baseModule, error: baseModuleError } = await supabase
      .from('base_modules')
      .select('id')
      .eq('id', data.base_module_id)
      .single();

    if (baseModuleError) {
      console.debug('üî• Erro ao buscar base module:', baseModuleError);
    }

    if (!baseModule) {
      console.debug('üî• M√≥dulo base n√£o encontrado');
      return { success: false, error: 'M√≥dulo base n√£o encontrado' };
    }
    
    console.debug('üî• Base module encontrado:', baseModule);

    // Verificar se j√° existe uma implementa√ß√£o com a mesma chave para o mesmo m√≥dulo base
    const { data: existingImpl } = await supabase
      .from('module_implementations')
      .select('id')
      .eq('base_module_id', data.base_module_id)
      .eq('implementation_key', data.implementation_key)
      .single();

    if (existingImpl) {
      return { success: false, error: 'J√° existe uma implementa√ß√£o com esta chave para este m√≥dulo base' };
    }

    // Verificar limite m√°ximo de implementa√ß√µes por m√≥dulo
    const maxImplementations = await getConfigValue('maxImplementationsPerModule');
    const { count: currentCount } = await supabase
      .from('module_implementations')
      .select('id', { count: 'exact' })
      .eq('base_module_id', data.base_module_id)
      .is('deleted_at', null);

    if (currentCount && currentCount >= maxImplementations) {
      await conditionalDebugLog('Limite de implementa√ß√µes atingido', { 
        baseModuleId: data.base_module_id, 
        currentCount, 
        maxImplementations 
      });
      return { 
        success: false, 
        error: `Limite de ${maxImplementations} implementa√ß√µes por m√≥dulo atingido. Configure um limite maior nas configura√ß√µes do sistema.` 
      };
    }

    // Se est√° marcando como padr√£o, desmarcar outras implementa√ß√µes padr√£o do mesmo m√≥dulo
    if (data.is_default) {
      await supabase
        .from('module_implementations')
        .update({ is_default: false })
        .eq('base_module_id', data.base_module_id);
    }

    // Criar registro da implementa√ß√£o
    const { data: newImpl, error: createError } = await supabase
      .from('module_implementations')
      .insert({
        base_module_id: data.base_module_id,
        implementation_key: data.implementation_key,
        name: data.name,
        description: data.description,
        version: data.version,
        component_type: data.component_type,
        template_type: data.template_type,
        template_config: data.template_config,
        component_path: data.component_path,
        dependencies: data.dependencies,
        config_schema_override: data.config_schema_override,
        audience: data.audience,
        complexity: data.complexity,
        priority: data.priority,
        status: data.status,
        is_default: data.is_default,
        created_by: user!.id,
      })
      .select()
      .single();

    if (createError) {
      console.error('Erro ao criar implementa√ß√£o:', createError);
      return { success: false, error: 'Erro interno ao criar implementa√ß√£o' };
    }

    // Gerar componente se for do tipo 'generated'
    if (newImpl.component_type === 'generated' && newImpl.template_type) {
      await generateComponentFromTemplate(newImpl.id, newImpl.template_type, newImpl.template_config);
    }

    // Aplicar configura√ß√µes autom√°ticas do sistema
    const { applySystemConfigurationsToNewEntity } = await import('./auto-config-applier');
    await applySystemConfigurationsToNewEntity('implementation', newImpl.id, newImpl);

    // Invalidar cache (consolidado)
    revalidateImplementationsPaths();

    // Log de auditoria condicional
    await conditionalAuditLog({
      actor_user_id: user!.id,
      action_type: 'CREATE_MODULE_IMPLEMENTATION',
      resource_type: 'module_implementation',
      resource_id: newImpl.id,
      details: {
        implementation_name: data.name,
        implementation_key: data.implementation_key,
        base_module_id: data.base_module_id,
        current_implementations_count: currentCount,
        max_allowed: maxImplementations,
      },
    });

    return {
      success: true,
      message: `Implementa√ß√£o "${data.name}" criada com sucesso`,
      data: newImpl,
    };

  } catch (error) {
    console.error('üî• Erro em createModuleImplementation:', error);
    console.error('üî• Stack trace:', error instanceof Error ? error.stack : 'No stack');
    return { success: false, error: 'Erro interno ao criar implementa√ß√£o' };
  }
}

/**
 * Atualizar implementa√ß√£o de m√≥dulo
 */
export async function updateModuleImplementation(input: UpdateModuleImplementationInput): Promise<ActionResult<ModuleImplementation>> {
  try {
    // Verificar autentica√ß√£o e permiss√µes
    const { isAuthenticated, isAdmin, user } = await verifyAdminAccess();
    
    if (!isAuthenticated) {
      return { success: false, error: 'Usu√°rio n√£o autenticado' };
    }
    
    if (!isAdmin) {
      return { success: false, error: 'Acesso negado. Apenas administradores podem editar implementa√ß√µes' };
    }

    // Validar entrada
    const validation = UpdateModuleImplementationSchema.safeParse(input);
    if (!validation.success) {
      return { 
        success: false, 
        error: `Dados inv√°lidos: ${validation.error.issues.map(i => i.message).join(', ')}` 
      };
    }

    const { id, ...updateData } = validation.data;
    const supabase = await createSupabaseServerClient();

    // Verificar se implementa√ß√£o existe
    const { data: existingImpl } = await supabase
      .from('module_implementations')
      .select(`
        id,
        base_module_id,
        implementation_key,
        name,
        description,
        version,
        is_default,
        is_active,
        archived_at,
        deleted_at
      `)
      .eq('id', id)
      .single();

    if (!existingImpl) {
      return { success: false, error: 'Implementa√ß√£o n√£o encontrada' };
    }

    // Verificar conflito de chave se houver mudan√ßa
    if (updateData.implementation_key && updateData.implementation_key !== existingImpl.implementation_key) {
      const { data: keyConflict } = await supabase
        .from('module_implementations')
        .select('id')
        .eq('base_module_id', existingImpl.base_module_id)
        .eq('implementation_key', updateData.implementation_key)
        .neq('id', id)
        .single();

      if (keyConflict) {
        return { success: false, error: 'J√° existe outra implementa√ß√£o com esta chave para este m√≥dulo' };
      }
    }

    // Se est√° marcando como padr√£o, desmarcar outras implementa√ß√µes padr√£o do mesmo m√≥dulo
    if (updateData.is_default) {
      await supabase
        .from('module_implementations')
        .update({ is_default: false })
        .eq('base_module_id', existingImpl.base_module_id)
        .neq('id', id);
    }

    // Atualizar implementa√ß√£o
    const { data: updatedImpl, error: updateError } = await supabase
      .from('module_implementations')
      .update({
        ...updateData,
        updated_at: new Date().toISOString(),
      })
      .eq('id', id)
      .select()
      .single();

    if (updateError) {
      console.error('Erro ao atualizar implementa√ß√£o:', updateError);
      return { success: false, error: 'Erro interno ao atualizar implementa√ß√£o' };
    }

    // Invalidar cache (consolidado)
    revalidateImplementationsPaths();

    // Log de auditoria
    await supabase.from('audit_logs').insert({
      user_id: user!.id,
      action: 'update_module_implementation',
      resource_type: 'module_implementation',
      resource_id: id,
      details: {
        updated_fields: Object.keys(updateData),
        implementation_key: updatedImpl.implementation_key,
      },
    });

    return {
      success: true,
      message: `Implementa√ß√£o "${updatedImpl.name}" atualizada com sucesso`,
      data: updatedImpl,
    };

  } catch (error) {
    console.error('Erro em updateModuleImplementation:', error);
    return { success: false, error: 'Erro interno do servidor' };
  }
}

/**
 * Excluir implementa√ß√£o de m√≥dulo
 */
export async function deleteModuleImplementation(implementationId: string): Promise<ActionResult> {
  try {
    // Verificar autentica√ß√£o e permiss√µes
    const { isAuthenticated, isAdmin, user } = await verifyAdminAccess();
    
    if (!isAuthenticated) {
      return { success: false, error: 'Usu√°rio n√£o autenticado' };
    }
    
    if (!isAdmin) {
      return { success: false, error: 'Acesso negado. Apenas administradores podem excluir implementa√ß√µes' };
    }

    const supabase = await createSupabaseServerClient();

    // Verificar se implementa√ß√£o existe
    const { data: existingImpl } = await supabase
      .from('module_implementations')
      .select('name, is_default, base_module_id')
      .eq('id', implementationId)
      .single();

    if (!existingImpl) {
      return { success: false, error: 'Implementa√ß√£o n√£o encontrada' };
    }

    // Verificar se h√° assignments usando esta implementa√ß√£o
    const { data: assignments, count: assignCount } = await supabase
      .from('tenant_module_assignments')
      .select('id', { count: 'exact' })
      .eq('implementation_id', implementationId);

    if (assignCount && assignCount > 0) {
      return { 
        success: false, 
        error: `N√£o √© poss√≠vel excluir a implementa√ß√£o. Existem ${assignCount} assignments usando-a. Remova-os primeiro.` 
      };
    }

    // Soft-excluir implementa√ß√£o
    const { error: deleteError } = await supabase
      .from('module_implementations')
      .update({ deleted_at: new Date().toISOString() })
      .eq('id', implementationId);

    if (deleteError) {
      console.error('Erro ao soft-excluir implementa√ß√£o:', deleteError);
      return { success: false, error: 'Erro interno ao soft-excluir implementa√ß√£o' };
    }

    // Se era a implementa√ß√£o padr√£o, marcar outra como padr√£o (se existir)
    if (existingImpl.is_default) {
      const { data: nextDefault } = await supabase
        .from('module_implementations')
        .select('id')
        .eq('base_module_id', existingImpl.base_module_id)
        .limit(1)
        .single();

      if (nextDefault) {
        await supabase
          .from('module_implementations')
          .update({ is_default: true })
          .eq('id', nextDefault.id);
      }
    }

    // Invalidar cache (consolidado)
    revalidateImplementationsPaths();

    // Log de auditoria
    await supabase.from('audit_logs').insert({
      user_id: user!.id,
      action: 'delete_module_implementation',
      resource_type: 'module_implementation',
      resource_id: implementationId,
      details: {
        implementation_name: existingImpl.name,
        was_default: existingImpl.is_default,
      },
    });

    return {
      success: true,
      message: `Implementa√ß√£o "${existingImpl.name}" exclu√≠da com sucesso`,
    };

  } catch (error) {
    console.error('Erro em deleteModuleImplementation:', error);
    return { success: false, error: 'Erro interno do servidor' };
  }
}

/**
 * Arquivar implementa√ß√£o de m√≥dulo (soft archive)
 */
export async function archiveModuleImplementation(implementationId: string): Promise<ActionResult> {
  try {
    // Verificar autentica√ß√£o e permiss√µes
    const { isAuthenticated, isAdmin, user } = await verifyAdminAccess();
    
    if (!isAuthenticated) {
      return { success: false, error: 'Usu√°rio n√£o autenticado' };
    }
    
    if (!isAdmin) {
      return { success: false, error: 'Acesso negado. Apenas administradores podem arquivar implementa√ß√µes' };
    }

    const supabase = await createSupabaseServerClient();

    // Verificar se implementa√ß√£o existe e n√£o est√° soft-deletada
    const { data: existingImpl } = await supabase
      .from('module_implementations')
      .select('name, deleted_at')
      .eq('id', implementationId)
      .is('deleted_at', null)
      .single();

    if (!existingImpl) {
      return { success: false, error: 'Implementa√ß√£o n√£o encontrada ou j√° soft-deletada' };
    }

    // Arquivar implementa√ß√£o
    const { error: archiveError } = await supabase
      .from('module_implementations')
      .update({ archived_at: new Date().toISOString() })
      .eq('id', implementationId);

    if (archiveError) {
      console.error('Erro ao arquivar implementa√ß√£o:', archiveError);
      return { success: false, error: 'Erro interno ao arquivar implementa√ß√£o' };
    }

    // Invalidar cache (consolidado)
    revalidateImplementationsPaths();

    // Log de auditoria
    await supabase.from('audit_logs').insert({
      user_id: user!.id,
      action: 'archive_module_implementation',
      resource_type: 'module_implementation',
      resource_id: implementationId,
      details: {
        implementation_name: existingImpl.name,
      },
    });

    return {
      success: true,
      message: `Implementa√ß√£o "${existingImpl.name}" arquivada com sucesso`,
    };

  } catch (error) {
    console.error('Erro em archiveModuleImplementation:', error);
    return { success: false, error: 'Erro interno do servidor' };
  }
}

/**
 * Restaurar implementa√ß√£o de m√≥dulo (desarquivar ou desfazer soft delete)
 */
export async function restoreModuleImplementation(implementationId: string): Promise<ActionResult> {
  try {
    // Verificar autentica√ß√£o e permiss√µes
    const { isAuthenticated, isAdmin, user } = await verifyAdminAccess();
    
    if (!isAuthenticated) {
      return { success: false, error: 'Usu√°rio n√£o autenticado' };
    }
    
    if (!isAdmin) {
      return { success: false, error: 'Acesso negado. Apenas administradores podem restaurar implementa√ß√µes' };
    }

    const supabase = await createSupabaseServerClient();

    // Verificar se implementa√ß√£o existe (pode estar arquivada ou soft-deletada)
    const { data: existingImpl } = await supabase
      .from('module_implementations')
      .select('name, archived_at, deleted_at')
      .eq('id', implementationId)
      .single();

    if (!existingImpl) {
      return { success: false, error: 'Implementa√ß√£o n√£o encontrada' };
    }

    if (existingImpl.archived_at === null && existingImpl.deleted_at === null) {
      return { success: false, error: 'Implementa√ß√£o j√° est√° ativa e n√£o precisa ser restaurada' };
    }

    // Restaurar implementa√ß√£o
    const { error: restoreError } = await supabase
      .from('module_implementations')
      .update({ archived_at: null, deleted_at: null })
      .eq('id', implementationId);

    if (restoreError) {
      console.error('Erro ao restaurar implementa√ß√£o:', restoreError);
      return { success: false, error: 'Erro interno ao restaurar implementa√ß√£o' };
    }

    // Invalidar cache (consolidado)
    revalidateImplementationsPaths();

    // Log de auditoria
    await supabase.from('audit_logs').insert({
      user_id: user!.id,
      action: 'restore_module_implementation',
      resource_type: 'module_implementation',
      resource_id: implementationId,
      details: {
        implementation_name: existingImpl.name,
      },
    });

    return {
      success: true,
      message: `Implementa√ß√£o "${existingImpl.name}" restaurada com sucesso`,
    };

  } catch (error) {
    console.error('Erro em restoreModuleImplementation:', error);
    return { success: false, error: 'Erro interno do servidor' };
  }
}

/**
 * Excluir implementa√ß√£o de m√≥dulo permanentemente (hard delete)
 */
export async function purgeModuleImplementation(implementationId: string): Promise<ActionResult> {
  try {
    // Verificar autentica√ß√£o e permiss√µes
    const { isAuthenticated, isAdmin, user } = await verifyAdminAccess();
    
    if (!isAuthenticated) {
      return { success: false, error: 'Usu√°rio n√£o autenticado' };
    }
    
    if (!isAdmin) {
      return { success: false, error: 'Acesso negado. Apenas administradores podem excluir implementa√ß√µes permanentemente' };
    }

    const supabase = await createSupabaseServerClient();

    // Verificar se implementa√ß√£o existe e se est√° soft-deletada
    const { data: existingImpl } = await supabase
      .from('module_implementations')
      .select('name, deleted_at')
      .eq('id', implementationId)
      .single();

    if (!existingImpl) {
      return { success: false, error: 'Implementa√ß√£o n√£o encontrada' };
    }

    if (existingImpl.deleted_at === null) {
      return { success: false, error: 'Implementa√ß√£o n√£o est√° soft-deletada. Use a fun√ß√£o de soft delete primeiro.' };
    }

    // Verificar se h√° assignments usando esta implementa√ß√£o (mesmo que soft-deletados)
    const { count: assignCount } = await supabase
      .from('tenant_module_assignments')
      .select('id', { count: 'exact' })
      .eq('implementation_id', implementationId);

    if (assignCount && assignCount > 0) {
      return { 
        success: false, 
        error: `N√£o √© poss√≠vel excluir permanentemente a implementa√ß√£o. Existem ${assignCount} assignments usando-a. Remova-os primeiro.` 
      };
    }

    // Excluir implementa√ß√£o permanentemente
    const { error: deleteError } = await supabase
      .from('module_implementations')
      .delete()
      .eq('id', implementationId);

    if (deleteError) {
      console.error('Erro ao excluir implementa√ß√£o permanentemente:', deleteError);
      return { success: false, error: 'Erro interno ao excluir implementa√ß√£o permanentemente' };
    }

    // Invalidar cache (consolidado)
    revalidateImplementationsPaths();

    // Log de auditoria
    await supabase.from('audit_logs').insert({
      user_id: user!.id,
      action: 'purge_module_implementation',
      resource_type: 'module_implementation',
      resource_id: implementationId,
      details: {
        implementation_name: existingImpl.name,
      },
    });

    return {
      success: true,
      message: `Implementa√ß√£o "${existingImpl.name}" exclu√≠da permanentemente com sucesso`,
    };

  } catch (error) {
    console.error('Erro em purgeModuleImplementation:', error);
    return { success: false, error: 'Erro interno do servidor' };
  }
}

/**
 * Excluir implementa√ß√£o de m√≥dulo permanentemente (hard delete)
 */
export async function deleteImplementation(implementationId: string): Promise<ActionResult> {
  try {
    const { isAuthenticated, isAdmin, user } = await verifyAdminAccess();
    if (!isAuthenticated || !isAdmin) {
      return { success: false, error: 'Acesso negado.' };
    }

    if (!implementationId) {
      return { success: false, error: 'ID da implementa√ß√£o √© obrigat√≥rio.' };
    }

    const supabase = await createSupabaseServerClient();

    // Verificar se a implementa√ß√£o existe
    const { data: existingImpl, error: fetchError } = await supabase
      .from('module_implementations')
      .select('id, name')
      .eq('id', implementationId)
      .single();

    if (fetchError || !existingImpl) {
      return { success: false, error: 'Implementa√ß√£o n√£o encontrada.' };
    }

    // Verificar se h√° assignments usando esta implementa√ß√£o
    const { count: assignCount } = await supabase
      .from('tenant_module_assignments')
      .select('id', { count: 'exact' })
      .eq('implementation_id', implementationId);

    if (assignCount && assignCount > 0) {
      return { 
        success: false, 
        error: `N√£o √© poss√≠vel excluir a implementa√ß√£o. Existem ${assignCount} assignments usando-a. Remova-os primeiro.` 
      };
    }

    // Excluir implementa√ß√£o permanentemente (hard delete)
    const { error: deleteError } = await supabase
      .from('module_implementations')
      .delete()
      .eq('id', implementationId);

    if (deleteError) {
      console.error('Erro ao excluir implementa√ß√£o:', deleteError);
      return { success: false, error: 'Erro interno ao excluir implementa√ß√£o.' };
    }

    revalidateImplementationsPaths();

    await supabase.from('audit_logs').insert({
      user_id: user!.id,
      action: 'delete_module_implementation',
      resource_type: 'module_implementation',
      resource_id: implementationId,
      details: { 
        implementation_name: existingImpl.name,
        action_performed: 'hard_delete'
      },
    });

    return { success: true, message: 'Implementa√ß√£o exclu√≠da com sucesso.' };
  } catch (error) {
    console.error('Erro inesperado em deleteImplementation:', error);
    return { success: false, error: 'Ocorreu um erro inesperado.' };
  }
}

