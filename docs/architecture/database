# Relat√≥rio de Alinhamento: Edge Functions vs Schema do Banco de Dados

## Resumo Executivo

Este relat√≥rio documenta a an√°lise e corre√ß√£o do alinhamento entre as edge functions do Supabase e o schema oficial do banco de dados BanBan AI Agent. Foram identificados e corrigidos v√°rios problemas de compatibilidade.

## Problemas Identificados e Corrigidos

### 1. Campo `metadata` vs `payload` na tabela `core_events`

**Problema**: V√°rias edge functions estavam usando o campo `metadata` ao inserir eventos na tabela `core_events`, mas o schema define o campo como `payload` (JSONB).

**Fun√ß√µes Afetadas**:
- `webhook-inventory-flow/index.ts`
- `webhook-sales-flow/index.ts`
- `webhook-transfer-flow/index.ts`

**Corre√ß√£o Aplicada**:
```typescript
// ANTES
metadata: {
  event_type: payload.event_type,
  // ...
}

// DEPOIS
payload: {
  event_type: payload.event_type,
  // ...
}
```

### 2. C√≥digos de Evento N√£o Alinhados com o Schema

**Problema**: Os c√≥digos de evento (`event_code`) usados nas edge functions n√£o correspondiam aos valores v√°lidos definidos no schema do banco.

**Schema Define**:
```sql
event_code ‚àà {
  'sale', 'return', 'transfer', 'adjustment', 
  'purchase_order_created', 'receipt_ok_cd', 
  'separation_in_progress', 'sale_completed', 
  'devolucao_aguardando', 'devolucao_concluida'
}
```

**Corre√ß√µes Aplicadas**:

#### webhook-inventory-flow
```typescript
// ANTES
const EVENT_CODE_MAPPING: Record<string, string> = {
  'product_sync': 'product_sync',
  'inventory_update': 'inventory_update',
  'price_update': 'price_update'
};

// DEPOIS
const EVENT_CODE_MAPPING: Record<string, string> = {
  'product_sync': 'adjustment',
  'inventory_update': 'adjustment', 
  'price_update': 'adjustment'
};
```

#### webhook-transfer-flow
```typescript
// ANTES
const EVENT_CODE_MAPPING: Record<string, string> = {
  'transfer_order_created': 'transfer_order_created',
  'transfer_shipped': 'transfer_shipped',
  'transfer_received': 'transfer_received',
  'transfer_completed': 'transfer_completed'
};

// DEPOIS
const EVENT_CODE_MAPPING: Record<string, string> = {
  'transfer_order_created': 'transfer',
  'transfer_shipped': 'transfer',
  'transfer_received': 'transfer',
  'transfer_completed': 'transfer'
};
```

### 3. Valida√ß√£o de Status de Documentos Incompleta

**Problema**: A fun√ß√£o `webhook-orders` n√£o validava todos os status poss√≠veis para documentos conforme definido no schema.

**Schema Define**:
```sql
status ‚àà {
  'PENDENTE', 'AGUARDANDO_CONFERENCIA', 
  'CONFERIDO_COM_DIVERGENCIA', 'EFETIVADO_CD', 
  'EFETIVADO_LOJA', 'CANCELADO'
}
```

**Corre√ß√£o Aplicada**:
```typescript
case 'document':
  if (data.doc_type && !['SUPPLIER_IN', 'TRANSFER_OUT', 'TRANSFER_IN', 'RETURN', 'SALE'].includes(data.doc_type)) {
    errors.push(`doc_type deve ser SUPPLIER_IN, TRANSFER_OUT, TRANSFER_IN, RETURN ou SALE. Recebido: ${data.doc_type}`);
  }
  // ADICIONADO:
  if (data.status && !['PENDENTE', 'AGUARDANDO_CONFERENCIA', 'CONFERIDO_COM_DIVERGENCIA', 'EFETIVADO_CD', 'EFETIVADO_LOJA', 'CANCELADO'].includes(data.status)) {
    errors.push(`status deve ser PENDENTE, AGUARDANDO_CONFERENCIA, CONFERIDO_COM_DIVERGENCIA, EFETIVADO_CD, EFETIVADO_LOJA ou CANCELADO. Recebido: ${data.status}`);
  }
  break;
```

## Status das Edge Functions

### ‚úÖ Totalmente Alinhadas
- `webhook-orders/index.ts` - J√° estava bem alinhada, apenas adicionada valida√ß√£o de status de documentos
- `webhook-purchase-flow/index.ts` - J√° estava correta

### ‚úÖ Corrigidas
- `webhook-inventory-flow/index.ts` - Corrigidos campos `payload` e `event_code`
- `webhook-sales-flow/index.ts` - Corrigido campo `payload`
- `webhook-transfer-flow/index.ts` - Corrigidos campos `payload` e `event_code`

### ‚ö†Ô∏è Valida√ß√£o Simples
- `webhook-purchase-simple/index.ts` - Fun√ß√£o de valida√ß√£o simples, n√£o interage diretamente com o banco

### üìù N√£o Aplic√°vel
- `daily-etl/` - Cont√©m apenas SQL functions
- `security-alerts/` - Cont√©m apenas documenta√ß√£o

## Valida√ß√µes Implementadas por Tabela

### `core_products`
- ‚úÖ `unit_measure` ‚àà {'PAR', 'UND', 'CX'}
- ‚úÖ `gender` ‚àà {'MAS', 'FEM', 'USX'}
- ‚úÖ `external_id` UNIQUE

### `core_locations`
- ‚úÖ `location_type` ‚àà {'CD', 'LOJA'}
- ‚úÖ `external_id` UNIQUE

### `core_orders`
- ‚úÖ `order_type` ‚àà {'COMPRA', 'TRANSFER'}
- ‚úÖ `status` ‚àà {'NOVO', 'APROVADO', 'CANCELADO'}
- ‚úÖ `external_id` UNIQUE

### `core_documents`
- ‚úÖ `doc_type` ‚àà {'SUPPLIER_IN', 'TRANSFER_OUT', 'TRANSFER_IN', 'RETURN', 'SALE'}
- ‚úÖ `status` ‚àà {'PENDENTE', 'AGUARDANDO_CONFERENCIA', 'CONFERIDO_COM_DIVERGENCIA', 'EFETIVADO_CD', 'EFETIVADO_LOJA', 'CANCELADO'}
- ‚úÖ `external_id` UNIQUE

### `core_movements`
- ‚úÖ `movement_type` ‚àà {'CD_RECEIPT', 'CD_TRANSFER', 'STORE_RECEIPT', 'SALE', 'RETURN'}

### `core_product_pricing`
- ‚úÖ `price_type` ‚àà {'BASE', 'CUSTO', 'PROMO', 'VIP'}
- ‚úÖ `price_value` ‚â• 0

### `core_inventory_snapshots`
- ‚úÖ `qty_on_hand` ‚â• 0

### `core_events`
- ‚úÖ `event_code` ‚àà {'sale', 'return', 'transfer', 'adjustment', 'purchase_order_created', 'receipt_ok_cd', 'separation_in_progress', 'sale_completed', 'devolucao_aguardando', 'devolucao_concluida'}

## Recomenda√ß√µes para Manuten√ß√£o

### 1. Testes Automatizados
Implementar testes que validem:
- Conformidade dos tipos TypeScript com o schema
- Valida√ß√£o de constraints antes da inser√ß√£o
- Mapeamento correto de c√≥digos de evento

### 2. Documenta√ß√£o Sincronizada
- Manter o `database-schema-reference.md` atualizado
- Documentar mudan√ßas no schema nas edge functions
- Criar changelog para altera√ß√µes de schema

### 3. Valida√ß√£o em Tempo de Desenvolvimento
- Usar ferramentas de gera√ß√£o de tipos a partir do schema
- Implementar linting rules espec√≠ficas para valida√ß√£o de ENUMs
- Configurar CI/CD para verificar alinhamento

### 4. Monitoramento em Produ√ß√£o
- Alertas para viola√ß√µes de constraint
- Logs estruturados para debugging
- M√©tricas de sucesso/falha por tipo de evento

## Pr√≥ximos Passos

1. **Testar as corre√ß√µes** em ambiente de desenvolvimento
2. **Executar script de compliance** para validar mudan√ßas
3. **Deploy das edge functions** corrigidas
4. **Monitorar logs** para identificar poss√≠veis problemas
5. **Atualizar documenta√ß√£o** de integra√ß√£o para desenvolvedores ERP

---

**Data do Relat√≥rio**: Janeiro 2025  
**Vers√£o do Schema**: 1.0  
**Status**: ‚úÖ Corre√ß√µes Aplicadas - Aguardando Deploy 