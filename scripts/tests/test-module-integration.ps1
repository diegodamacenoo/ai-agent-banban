# ============================================================================
# SCRIPT DE TESTE - INTEGRA√á√ÉO DE M√ìDULOS BANBAN
# ============================================================================
# Testa a integra√ß√£o dos m√≥dulos Banban existentes com o sistema de versionamento
# Executa testes das duas prioridades cr√≠ticas implementadas

Write-Host "üöÄ INICIANDO TESTE DE INTEGRA√á√ÉO DOS M√ìDULOS BANBAN" -ForegroundColor Green
Write-Host "========================================================" -ForegroundColor Green
Write-Host ""

# Configura√ß√£o
$baseUrl = "http://localhost:3000"
$apiEndpoints = @{
    integration_status = "$baseUrl/api/admin/modules/integration"
    integration_execute = "$baseUrl/api/admin/modules/integration"
    versions = "$baseUrl/api/admin/modules/versions"
    deploy = "$baseUrl/api/admin/modules/deploy"
}

# Fun√ß√£o para fazer requisi√ß√µes HTTP
function Invoke-ApiRequest {
    param(
        [string]$Url,
        [string]$Method = "GET",
        [hashtable]$Body = $null,
        [string]$Description = ""
    )
    
    try {
        Write-Host "üîÑ $Description" -ForegroundColor Yellow
        
        $params = @{
            Uri = $Url
            Method = $Method
            ContentType = "application/json"
        }
        
        if ($Body) {
            $params.Body = $Body | ConvertTo-Json -Depth 10
        }
        
        $response = Invoke-RestMethod @params
        
        if ($response.success) {
            Write-Host "‚úÖ Sucesso: $Description" -ForegroundColor Green
            return $response
        } else {
            Write-Host "‚ùå Erro: $($response.error)" -ForegroundColor Red
            return $null
        }
    } catch {
        Write-Host "‚ùå Erro de conex√£o: $($_.Exception.Message)" -ForegroundColor Red
        return $null
    }
}

# Fun√ß√£o para exibir resultados formatados
function Show-TestResults {
    param(
        [string]$TestName,
        [bool]$Success,
        [string]$Details = ""
    )
    
    $status = if ($Success) { "‚úÖ PASSOU" } else { "‚ùå FALHOU" }
    $color = if ($Success) { "Green" } else { "Red" }
    
    Write-Host "  $status - $TestName" -ForegroundColor $color
    if ($Details) {
        Write-Host "    $Details" -ForegroundColor Gray
    }
}

# ============================================================================
# FASE 1: VERIFICA√á√ÉO INICIAL DO STATUS
# ============================================================================

Write-Host "üìã FASE 1: VERIFICA√á√ÉO DO STATUS INICIAL" -ForegroundColor Cyan
Write-Host "----------------------------------------" -ForegroundColor Cyan

$initialStatus = Invoke-ApiRequest -Url $apiEndpoints.integration_status -Description "Verificando status inicial da integra√ß√£o"

if ($initialStatus) {
    Write-Host ""
    Write-Host "üìä STATUS INICIAL:" -ForegroundColor White
    Write-Host "  ‚Ä¢ Total de m√≥dulos: $($initialStatus.data.totalModules)" -ForegroundColor White
    Write-Host "  ‚Ä¢ M√≥dulos integrados: $($initialStatus.data.integratedModules)" -ForegroundColor White
    Write-Host "  ‚Ä¢ M√≥dulos pendentes: $($initialStatus.data.pendingModules.Count)" -ForegroundColor White
    
    if ($initialStatus.data.pendingModules.Count -gt 0) {
        Write-Host "  ‚Ä¢ M√≥dulos pendentes: $($initialStatus.data.pendingModules -join ', ')" -ForegroundColor Yellow
    }
    
    Write-Host ""
    Write-Host "üìã DETALHES DOS M√ìDULOS:" -ForegroundColor White
    foreach ($module in $initialStatus.data.details) {
        $statusIcon = switch ($module.status) {
            "integrated" { "‚úÖ" }
            "pending" { "‚è≥" }
            "error" { "‚ùå" }
            default { "‚ùì" }
        }
        Write-Host "  $statusIcon $($module.name) ($($module.moduleId))" -ForegroundColor White
        Write-Host "    Registrado: $($module.registered) | Versionado: $($module.versioned)" -ForegroundColor Gray
    }
} else {
    Write-Host "‚ùå Falha ao obter status inicial" -ForegroundColor Red
    exit 1
}

# ============================================================================
# FASE 2: EXECU√á√ÉO DA INTEGRA√á√ÉO COMPLETA
# ============================================================================

Write-Host ""
Write-Host "üîÑ FASE 2: EXECU√á√ÉO DA INTEGRA√á√ÉO COMPLETA" -ForegroundColor Cyan
Write-Host "-------------------------------------------" -ForegroundColor Cyan

$integrationBody = @{
    action = "integrate_all"
}

$integrationResult = Invoke-ApiRequest `
    -Url $apiEndpoints.integration_execute `
    -Method "POST" `
    -Body $integrationBody `
    -Description "Executando integra√ß√£o completa dos m√≥dulos Banban"

if ($integrationResult) {
    Write-Host ""
    Write-Host "üìä RESULTADO DA INTEGRA√á√ÉO:" -ForegroundColor White
    Write-Host "  ‚Ä¢ Total processado: $($integrationResult.data.summary.total)" -ForegroundColor White
    Write-Host "  ‚Ä¢ Sucessos: $($integrationResult.data.summary.successful)" -ForegroundColor Green
    Write-Host "  ‚Ä¢ Falhas: $($integrationResult.data.summary.failed)" -ForegroundColor Red
    
    Write-Host ""
    Write-Host "üìã DETALHES POR M√ìDULO:" -ForegroundColor White
    foreach ($result in $integrationResult.data.results) {
        $success = $result.registered -and $result.versioned
        $statusIcon = if ($success) { "‚úÖ" } else { "‚ùå" }
        Write-Host "  $statusIcon $($result.moduleId)" -ForegroundColor White
        Write-Host "    Registrado: $($result.registered) | Versionado: $($result.versioned)" -ForegroundColor Gray
        if ($result.error) {
            Write-Host "    Erro: $($result.error)" -ForegroundColor Red
        }
    }
} else {
    Write-Host "‚ùå Falha na execu√ß√£o da integra√ß√£o" -ForegroundColor Red
}

# ============================================================================
# FASE 3: VERIFICA√á√ÉO P√ìS-INTEGRA√á√ÉO
# ============================================================================

Write-Host ""
Write-Host "üîç FASE 3: VERIFICA√á√ÉO P√ìS-INTEGRA√á√ÉO" -ForegroundColor Cyan
Write-Host "--------------------------------------" -ForegroundColor Cyan

Start-Sleep -Seconds 2  # Aguardar processamento

$finalStatus = Invoke-ApiRequest -Url $apiEndpoints.integration_status -Description "Verificando status ap√≥s integra√ß√£o"

if ($finalStatus) {
    Write-Host ""
    Write-Host "üìä STATUS FINAL:" -ForegroundColor White
    Write-Host "  ‚Ä¢ Total de m√≥dulos: $($finalStatus.data.totalModules)" -ForegroundColor White
    Write-Host "  ‚Ä¢ M√≥dulos integrados: $($finalStatus.data.integratedModules)" -ForegroundColor White
    Write-Host "  ‚Ä¢ M√≥dulos pendentes: $($finalStatus.data.pendingModules.Count)" -ForegroundColor White
    
    $integrationProgress = ($finalStatus.data.integratedModules / $finalStatus.data.totalModules) * 100
    Write-Host "  ‚Ä¢ Progresso: $([math]::Round($integrationProgress, 1))%" -ForegroundColor White
} else {
    Write-Host "‚ùå Falha ao obter status final" -ForegroundColor Red
}

# ============================================================================
# FASE 4: TESTE DO SISTEMA DE VERSIONAMENTO
# ============================================================================

Write-Host ""
Write-Host "üè∑Ô∏è  FASE 4: TESTE DO SISTEMA DE VERSIONAMENTO" -ForegroundColor Cyan
Write-Host "----------------------------------------------" -ForegroundColor Cyan

# Testar listagem de vers√µes para um m√≥dulo espec√≠fico
$testModuleId = "banban-insights"
$versionsUrl = "$($apiEndpoints.versions)?moduleId=$testModuleId"

$versionsResult = Invoke-ApiRequest -Url $versionsUrl -Description "Listando vers√µes do m√≥dulo $testModuleId"

if ($versionsResult -and $versionsResult.data) {
    Write-Host ""
    Write-Host "üìã VERS√ïES DO M√ìDULO $testModuleId" -ForegroundColor White
    foreach ($version in $versionsResult.data) {
        $statusBadge = switch ($version.status) {
            "released" { "üü¢" }
            "draft" { "üü°" }
            "testing" { "üîµ" }
            "deprecated" { "üî¥" }
            default { "‚ö™" }
        }
        $latestBadge = if ($version.is_latest) { " [LATEST]" } else { "" }
        $stableBadge = if ($version.is_stable) { " [STABLE]" } else { "" }
        
        Write-Host "  $statusBadge v$($version.version)$latestBadge$stableBadge" -ForegroundColor White
        Write-Host "    Status: $($version.status) | Criado: $($version.created_at)" -ForegroundColor Gray
    }
} else {
    Write-Host "‚ö†Ô∏è  Nenhuma vers√£o encontrada para $testModuleId" -ForegroundColor Yellow
}

# ============================================================================
# FASE 5: TESTE DO SISTEMA DE DEPLOYMENT
# ============================================================================

Write-Host ""
Write-Host "üöÄ FASE 5: TESTE DO SISTEMA DE DEPLOYMENT" -ForegroundColor Cyan
Write-Host "------------------------------------------" -ForegroundColor Cyan

# Teste de cria√ß√£o de plano de deployment
$deployPlanBody = @{
    action = "plan"
    moduleId = $testModuleId
    version = "1.0.0"
    targetEnvironment = "production"
}

$deployPlanResult = Invoke-ApiRequest `
    -Url $apiEndpoints.deploy `
    -Method "POST" `
    -Body $deployPlanBody `
    -Description "Criando plano de deployment para $testModuleId"

if ($deployPlanResult) {
    Write-Host ""
    Write-Host "üìã PLANO DE DEPLOYMENT:" -ForegroundColor White
    Write-Host "  ‚Ä¢ M√≥dulo: $($deployPlanResult.data.moduleId)" -ForegroundColor White
    Write-Host "  ‚Ä¢ Vers√£o: $($deployPlanResult.data.version)" -ForegroundColor White
    Write-Host "  ‚Ä¢ Ambiente: $($deployPlanResult.data.targetEnvironment)" -ForegroundColor White
    Write-Host "  ‚Ä¢ Estimativa: $($deployPlanResult.data.estimatedDuration)" -ForegroundColor White
    
    if ($deployPlanResult.data.validations) {
        Write-Host "  ‚Ä¢ Valida√ß√µes:" -ForegroundColor White
        foreach ($validation in $deployPlanResult.data.validations) {
            $validIcon = if ($validation.passed) { "‚úÖ" } else { "‚ùå" }
            Write-Host "    $validIcon $($validation.check)" -ForegroundColor White
        }
    }
} else {
    Write-Host "‚ö†Ô∏è  Falha ao criar plano de deployment" -ForegroundColor Yellow
}

# ============================================================================
# FASE 6: RESUMO E RELAT√ìRIO FINAL
# ============================================================================

Write-Host ""
Write-Host "üìä RESUMO FINAL DOS TESTES" -ForegroundColor Cyan
Write-Host "===========================" -ForegroundColor Cyan

# Calcular m√©tricas de sucesso
$testsResults = @()

# Teste 1: Status inicial obtido
$testsResults += @{
    Name = "Verifica√ß√£o de Status Inicial"
    Success = $initialStatus -ne $null
    Details = if ($initialStatus) { "$($initialStatus.data.totalModules) m√≥dulos detectados" } else { "Falha na API" }
}

# Teste 2: Integra√ß√£o executada
$testsResults += @{
    Name = "Execu√ß√£o da Integra√ß√£o"
    Success = $integrationResult -ne $null -and $integrationResult.data.summary.successful -gt 0
    Details = if ($integrationResult) { "$($integrationResult.data.summary.successful)/$($integrationResult.data.summary.total) m√≥dulos integrados" } else { "Falha na execu√ß√£o" }
}

# Teste 3: Status final melhorado
$improvementSuccess = $false
if ($initialStatus -and $finalStatus) {
    $improvementSuccess = $finalStatus.data.integratedModules -ge $initialStatus.data.integratedModules
}
$testsResults += @{
    Name = "Melhoria no Status de Integra√ß√£o"
    Success = $improvementSuccess
    Details = if ($finalStatus) { "$($finalStatus.data.integratedModules) m√≥dulos integrados" } else { "Status n√£o dispon√≠vel" }
}

# Teste 4: Sistema de versionamento funcional
$testsResults += @{
    Name = "Sistema de Versionamento"
    Success = $versionsResult -ne $null -and $versionsResult.data.Count -gt 0
    Details = if ($versionsResult) { "$($versionsResult.data.Count) vers√µes encontradas" } else { "Nenhuma vers√£o encontrada" }
}

# Teste 5: Sistema de deployment funcional
$testsResults += @{
    Name = "Sistema de Deployment"
    Success = $deployPlanResult -ne $null
    Details = if ($deployPlanResult) { "Plano criado com sucesso" } else { "Falha na cria√ß√£o do plano" }
}

# Exibir resultados
Write-Host ""
foreach ($test in $testsResults) {
    Show-TestResults -TestName $test.Name -Success $test.Success -Details $test.Details
}

# Calcular taxa de sucesso geral
$successCount = ($testsResults | Where-Object { $_.Success }).Count
$totalTests = $testsResults.Count
$successRate = ($successCount / $totalTests) * 100

Write-Host ""
Write-Host "üéØ TAXA DE SUCESSO GERAL: $successCount/$totalTests ($([math]::Round($successRate, 1))%)" -ForegroundColor White

if ($successRate -ge 80) {
    Write-Host "üéâ INTEGRA√á√ÉO CONCLU√çDA COM SUCESSO!" -ForegroundColor Green
    Write-Host "‚úÖ O sistema de integra√ß√£o est√° funcionando corretamente" -ForegroundColor Green
} elseif ($successRate -ge 60) {
    Write-Host "‚ö†Ô∏è  INTEGRA√á√ÉO PARCIALMENTE CONCLU√çDA" -ForegroundColor Yellow
    Write-Host "üîß Alguns ajustes podem ser necess√°rios" -ForegroundColor Yellow
} else {
    Write-Host "‚ùå INTEGRA√á√ÉO COM PROBLEMAS" -ForegroundColor Red
    Write-Host "üîß Revis√£o necess√°ria antes de usar em produ√ß√£o" -ForegroundColor Red
}

# ============================================================================
# PR√ìXIMOS PASSOS
# ============================================================================

Write-Host ""
Write-Host "üöÄ PR√ìXIMOS PASSOS RECOMENDADOS:" -ForegroundColor Cyan
Write-Host "=================================" -ForegroundColor Cyan

if ($successRate -ge 80) {
    Write-Host "1. ‚úÖ Sistema pronto para uso em produ√ß√£o" -ForegroundColor Green
    Write-Host "2. üîÑ Configurar monitoramento cont√≠nuo" -ForegroundColor White
    Write-Host "3. üìä Implementar dashboards de acompanhamento" -ForegroundColor White
    Write-Host "4. üîß Configurar alertas autom√°ticos" -ForegroundColor White
} else {
    Write-Host "1. üîß Revisar e corrigir falhas identificadas" -ForegroundColor Red
    Write-Host "2. üß™ Executar testes adicionais" -ForegroundColor Yellow
    Write-Host "3. üìã Validar configura√ß√µes do banco de dados" -ForegroundColor Yellow
    Write-Host "4. üîÑ Re-executar integra√ß√£o ap√≥s corre√ß√µes" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üìù COMANDOS √öTEIS:" -ForegroundColor Cyan
Write-Host "  ‚Ä¢ Verificar status: GET /api/admin/modules/integration" -ForegroundColor White
Write-Host "  ‚Ä¢ Re-integrar m√≥dulo: POST /api/admin/modules/integration {action: 'reintegrate_module', moduleId: 'banban-insights'}" -ForegroundColor White
Write-Host "  ‚Ä¢ Listar vers√µes: GET /api/admin/modules/versions?moduleId=banban-insights" -ForegroundColor White
Write-Host "  ‚Ä¢ Criar deployment: POST /api/admin/modules/deploy {action: 'plan', moduleId: 'banban-insights'}" -ForegroundColor White

Write-Host ""
Write-Host "üéØ TESTE DE INTEGRA√á√ÉO CONCLU√çDO!" -ForegroundColor Green
Write-Host "Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" -ForegroundColor Gray 