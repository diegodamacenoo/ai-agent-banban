const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do Supabase
const supabaseUrl = 'http://127.0.0.1:54321';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function debugOrganizationModules() {
  console.log('üîç Debug - Verificando m√≥dulos de organiza√ß√µes espec√≠ficas...\n');

  try {
    // Buscar organiza√ß√µes com dados completos
    const { data: organizations, error: orgError } = await supabase
      .from('organizations')
      .select('*')
      .order('created_at', { ascending: false });

    if (orgError) {
      console.error('‚ùå Erro ao buscar organiza√ß√µes:', orgError);
      return;
    }

    if (!organizations || organizations.length === 0) {
      console.warn('‚ö†Ô∏è Nenhuma organiza√ß√£o encontrada');
      return;
    }

    console.log(`üìä Encontradas ${organizations.length} organiza√ß√µes:\n`);

    // Analisar cada organiza√ß√£o
    for (let i = 0; i < organizations.length; i++) {
      const org = organizations[i];
      console.log(`\n${i + 1}. üè¢ ${org.company_trading_name || org.company_legal_name}`);
      console.log(`   üìã Dados B√°sicos:`);
      console.log(`      ID: ${org.id}`);
      console.log(`      Slug: ${org.slug || 'N/A'}`);
      console.log(`      Tipo: ${org.client_type || 'N/A'}`);
      console.log(`      Implementa√ß√£o Completa: ${org.is_implementation_complete ? '‚úÖ Sim' : '‚ùå N√£o'}`);
      
      console.log(`   üîß Implementation Config:`);
      if (org.implementation_config) {
        console.log(`      Raw Config:`, JSON.stringify(org.implementation_config, null, 2));
        
        if (org.implementation_config.subscribed_modules) {
          console.log(`      ‚úÖ M√≥dulos Assinados (${org.implementation_config.subscribed_modules.length}):`);
          org.implementation_config.subscribed_modules.forEach((module, idx) => {
            console.log(`         ${idx + 1}. ${module}`);
          });
        } else {
          console.log(`      ‚ùå Nenhum m√≥dulo em subscribed_modules`);
        }

        if (org.implementation_config.custom_modules) {
          console.log(`      üîß Custom Modules (${org.implementation_config.custom_modules.length}):`);
          org.implementation_config.custom_modules.forEach((module, idx) => {
            console.log(`         ${idx + 1}. ${module}`);
          });
        }

        if (org.implementation_config.features) {
          console.log(`      üéØ Features (${org.implementation_config.features.length}):`);
          org.implementation_config.features.forEach((feature, idx) => {
            console.log(`         ${idx + 1}. ${feature}`);
          });
        }
      } else {
        console.log(`      ‚ùå Nenhuma configura√ß√£o de implementa√ß√£o encontrada`);
      }

      // Simular o que o UnifiedSidebar faz
      console.log(`   üß™ Simula√ß√£o UnifiedSidebar:`);
      const subscribedModules = org.implementation_config?.subscribed_modules || [];
      console.log(`      M√≥dulos que deveriam aparecer na sidebar: [${subscribedModules.join(', ')}]`);
      
      if (subscribedModules.length === 0) {
        console.log(`      ‚ö†Ô∏è PROBLEMA: Nenhum m√≥dulo configurado para aparecer na sidebar!`);
      } else {
        console.log(`      ‚úÖ ${subscribedModules.length} m√≥dulos deveriam aparecer na sidebar`);
        
        // Mapear m√≥dulos como o UnifiedSidebar faz
        const moduleNavItems = [];
        
        if (subscribedModules.includes('insights')) {
          moduleNavItems.push('Insights Avan√ßados');
        }
        if (subscribedModules.includes('performance')) {
          moduleNavItems.push('Performance');
        }
        if (subscribedModules.includes('alerts')) {
          moduleNavItems.push('Alertas');
        }
        if (subscribedModules.includes('inventory')) {
          moduleNavItems.push('Gest√£o de Estoque');
        }
        if (subscribedModules.includes('analytics')) {
          moduleNavItems.push('Analytics');
        }
        if (subscribedModules.includes('data-processing')) {
          moduleNavItems.push('Processamento de Dados');
        }

        console.log(`      üìã Items de navega√ß√£o que seriam criados:`);
        moduleNavItems.forEach((item, idx) => {
          console.log(`         ${idx + 1}. ${item}`);
        });

        if (moduleNavItems.length === 0) {
          console.log(`      ‚ö†Ô∏è PROBLEMA: M√≥dulos configurados n√£o correspondem aos mapeados no UnifiedSidebar!`);
          console.log(`      üí° M√≥dulos configurados: [${subscribedModules.join(', ')}]`);
          console.log(`      üí° M√≥dulos suportados: [insights, performance, alerts, inventory, analytics, data-processing]`);
        }
      }

      console.log(`   ${'‚îÄ'.repeat(80)}`);
    }

    // Testar especificamente uma organiza√ß√£o com slug
    const orgWithSlug = organizations.find(org => org.slug);
    if (orgWithSlug) {
      console.log(`\nüß™ TESTE ESPEC√çFICO: Organiza√ß√£o ${orgWithSlug.company_trading_name}`);
      console.log(`   Slug: ${orgWithSlug.slug}`);
      console.log(`   URL do tenant: /${orgWithSlug.slug}`);
      
      const subscribedModules = orgWithSlug.implementation_config?.subscribed_modules || [];
      console.log(`   M√≥dulos que deveriam aparecer: [${subscribedModules.join(', ')}]`);
      
      if (subscribedModules.length === 0) {
        console.log(`   ‚ùå DIAGN√ìSTICO: Esta organiza√ß√£o n√£o tem m√≥dulos configurados!`);
        console.log(`   üí° SOLU√á√ÉO: Configure m√≥dulos na p√°gina /admin/organizations/${orgWithSlug.id}`);
      } else {
        console.log(`   ‚úÖ DIAGN√ìSTICO: Organiza√ß√£o tem ${subscribedModules.length} m√≥dulos configurados`);
        console.log(`   üîç PR√ìXIMO PASSO: Verificar se estes m√≥dulos est√£o chegando ao layout tenant`);
      }
    }

  } catch (error) {
    console.error('‚ùå Erro durante debug:', error);
  }
}

// Executar debug
debugOrganizationModules().then(() => {
  console.log('\nüèÅ Debug de m√≥dulos conclu√≠do');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå Erro fatal:', error);
  process.exit(1);
}); 