# Script para sincronizar role do usu√°rio entre profiles e auth.users

Write-Host "üîß Sincronizando role do usu√°rio master_admin..." -ForegroundColor Yellow

# Verificar se o Supabase CLI est√° instalado
if (-not (Get-Command "supabase" -ErrorAction SilentlyContinue)) {
    Write-Host "‚ùå Supabase CLI n√£o encontrado. Instale com: npm install -g supabase" -ForegroundColor Red
    exit 1
}

Write-Host "üìã Executando script de sincroniza√ß√£o..." -ForegroundColor Blue

# Executar o script SQL
try {
    supabase db reset --db-url $env:DATABASE_URL
    Write-Host "‚úÖ Script executado com sucesso!" -ForegroundColor Green
    
    Write-Host "üìù Verificando resultado..." -ForegroundColor Blue
    
    # Verificar se a sincroniza√ß√£o funcionou
    $verifyQuery = @"
SELECT 
  p.email,
  p.role as profile_role,
  (au.raw_app_meta_data->>'user_role') as auth_role,
  CASE 
    WHEN p.role = (au.raw_app_meta_data->>'user_role') THEN '‚úÖ Sincronizado'
    ELSE '‚ùå Dessincronizado'
  END as status
FROM profiles p
LEFT JOIN auth.users au ON p.id = au.id
WHERE p.email = 'brcomdiego@gmail.com';
"@

    Write-Host "üîç Status da sincroniza√ß√£o:" -ForegroundColor Cyan
    supabase db query $verifyQuery
    
    Write-Host ""
    Write-Host "‚ö†Ô∏è  IMPORTANTE: Fa√ßa logout e login novamente para que o JWT seja atualizado!" -ForegroundColor Yellow
    Write-Host "   1. Acesse /login" -ForegroundColor Gray
    Write-Host "   2. Clique em 'Sair'" -ForegroundColor Gray
    Write-Host "   3. Fa√ßa login novamente" -ForegroundColor Gray
    Write-Host "   4. Teste o acesso ao /admin" -ForegroundColor Gray
    
} catch {
    Write-Host "‚ùå Erro ao executar script: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "üéØ Pr√≥ximos passos:" -ForegroundColor Green
Write-Host "   ‚Ä¢ Teste a p√°gina de debug: http://localhost:3000/admin/debug" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Verifique o dashboard: http://localhost:3000/admin" -ForegroundColor Gray 