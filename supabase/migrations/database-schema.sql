-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public._backup_alert_digest (
  id uuid,
  alert_ts timestamp with time zone,
  severity text,
  title text,
  description text,
  resolved boolean,
  created_at timestamp with time zone
);
CREATE TABLE public._backup_alert_thresholds (
  id uuid,
  organization_id uuid,
  alert_type text,
  threshold_config jsonb,
  is_active boolean,
  created_at timestamp with time zone,
  updated_at timestamp with time zone,
  created_by uuid,
  updated_by uuid
);
CREATE TABLE public._backup_core_document_items (
  id uuid,
  document_id uuid,
  variant_id uuid,
  item_seq integer,
  qty numeric,
  unit_price numeric,
  qty_expected numeric,
  qty_scanned_ok numeric,
  qty_scanned_diff numeric,
  created_at timestamp with time zone,
  updated_at timestamp with time zone
);
CREATE TABLE public._backup_core_documents (
  id uuid,
  order_id uuid,
  external_id text,
  doc_type USER-DEFINED,
  issue_date date,
  total_value numeric,
  status USER-DEFINED,
  origin_location_id uuid,
  dest_location_id uuid,
  created_at timestamp with time zone,
  updated_at timestamp with time zone
);
CREATE TABLE public._backup_core_events (
  id uuid,
  entity_type USER-DEFINED,
  event_code USER-DEFINED,
  entity_id uuid,
  event_ts timestamp with time zone,
  payload jsonb,
  created_at timestamp with time zone,
  updated_at timestamp with time zone
);
CREATE TABLE public._backup_core_inventory_snapshots (
  id uuid,
  variant_id uuid,
  location_id uuid,
  qty_on_hand numeric,
  last_update_ts timestamp with time zone,
  created_at timestamp with time zone,
  product_id uuid,
  updated_at timestamp with time zone
);
CREATE TABLE public._backup_core_movements (
  id uuid,
  product_id uuid,
  variant_id uuid,
  location_id uuid,
  reference_id uuid,
  movement_type USER-DEFINED,
  qty_change numeric,
  movement_ts timestamp with time zone,
  created_at timestamp with time zone,
  updated_at timestamp with time zone
);
CREATE TABLE public._backup_core_order_items (
  id uuid,
  order_id uuid,
  variant_id uuid,
  item_seq integer,
  qty_ordered numeric,
  unit_cost_est numeric,
  notes text,
  created_at timestamp with time zone,
  updated_at timestamp with time zone
);
CREATE TABLE public._backup_core_orders (
  id uuid,
  external_id text,
  supplier_id uuid,
  origin_location_id uuid,
  dest_location_id uuid,
  order_type USER-DEFINED,
  issue_timestamp timestamp with time zone,
  status USER-DEFINED,
  created_at timestamp with time zone,
  updated_at timestamp with time zone
);
CREATE TABLE public._backup_core_product_pricing (
  id uuid,
  variant_id uuid,
  price_value numeric,
  valid_from date,
  valid_to date,
  created_at timestamp with time zone,
  change_reason text,
  margin_percentage numeric,
  cost_price numeric,
  markup_percentage numeric,
  product_id uuid,
  price_type text,
  updated_at timestamp with time zone
);
CREATE TABLE public._backup_security_alert_settings (
  user_id uuid,
  alert_new_device boolean,
  alert_failed_attempts boolean,
  alert_user_deletion boolean,
  failed_attempts_threshold integer,
  created_at timestamp with time zone,
  updated_at timestamp with time zone
);
CREATE TABLE public._backup_tenant_dashboard_widgets (
  id uuid,
  tenant_id uuid,
  widget_id uuid,
  enabled boolean,
  position_x integer,
  position_y integer,
  width integer,
  height integer,
  custom_params jsonb,
  display_order integer,
  created_at timestamp with time zone,
  updated_at timestamp with time zone
);
CREATE TABLE public._backup_tenant_module_settings (
  id uuid,
  organization_id uuid,
  module_id uuid,
  settings jsonb,
  created_at timestamp with time zone,
  updated_at timestamp with time zone
);
CREATE TABLE public._backup_tenant_modules (
  organization_id uuid,
  module_id uuid,
  version_id uuid,
  activated_at timestamp with time zone,
  updated_at timestamp with time zone,
  operational_status USER-DEFINED,
  last_status_change timestamp with time zone,
  status_change_reason text,
  approval_requested_at timestamp with time zone,
  approved_by uuid,
  approved_at timestamp with time zone,
  provisioning_started_at timestamp with time zone,
  provisioning_completed_at timestamp with time zone,
  last_health_check timestamp with time zone,
  health_status text,
  error_details jsonb,
  retry_count integer,
  billing_enabled boolean,
  usage_limits jsonb,
  current_usage jsonb,
  auto_upgrade boolean,
  locked_version boolean,
  is_visible boolean
);
CREATE TABLE public._backup_tenant_modules_before_refactor (
  organization_id uuid,
  module_id uuid,
  version_id uuid,
  activated_at timestamp with time zone,
  updated_at timestamp with time zone,
  operational_status USER-DEFINED,
  last_status_change timestamp with time zone,
  status_change_reason text,
  approval_requested_at timestamp with time zone,
  approved_by uuid,
  approved_at timestamp with time zone,
  provisioning_started_at timestamp with time zone,
  provisioning_completed_at timestamp with time zone,
  last_health_check timestamp with time zone,
  health_status text,
  error_details jsonb,
  retry_count integer,
  billing_enabled boolean,
  usage_limits jsonb,
  current_usage jsonb,
  auto_upgrade boolean,
  locked_version boolean,
  is_visible boolean,
  implementation_id uuid,
  custom_config jsonb,
  installed_at timestamp without time zone,
  last_accessed_at timestamp without time zone
);
CREATE TABLE public.alert_digest (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  alert_ts timestamp with time zone NOT NULL DEFAULT now(),
  severity text NOT NULL CHECK (severity = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text, 'critical'::text])),
  title text NOT NULL,
  description text NOT NULL,
  resolved boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT alert_digest_pkey PRIMARY KEY (id)
);
CREATE TABLE public.alert_thresholds (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  organization_id uuid NOT NULL,
  alert_type text NOT NULL CHECK (alert_type = ANY (ARRAY['stagnant'::text, 'replenishment'::text, 'divergence'::text, 'margin'::text, 'returns'::text, 'redistribution'::text])),
  threshold_config jsonb NOT NULL,
  is_active boolean NOT NULL DEFAULT true,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  created_by uuid,
  updated_by uuid,
  CONSTRAINT alert_thresholds_pkey PRIMARY KEY (id),
  CONSTRAINT alert_thresholds_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES auth.users(id),
  CONSTRAINT alert_thresholds_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id)
);
CREATE TABLE public.api_key_usage_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  api_key_id uuid NOT NULL,
  endpoint character varying NOT NULL,
  method character varying NOT NULL,
  ip_address inet,
  user_agent text,
  response_status integer NOT NULL CHECK (response_status >= 100 AND response_status < 600),
  processing_time_ms integer CHECK (processing_time_ms IS NULL OR processing_time_ms >= 0),
  organization_id uuid NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT api_key_usage_logs_pkey PRIMARY KEY (id),
  CONSTRAINT api_key_usage_logs_api_key_id_fkey FOREIGN KEY (api_key_id) REFERENCES public.api_keys(id),
  CONSTRAINT api_key_usage_logs_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id)
);
CREATE TABLE public.api_keys (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name character varying NOT NULL CHECK (char_length(name::text) >= 1),
  description text,
  key_hash character varying NOT NULL UNIQUE,
  prefix character varying NOT NULL,
  permissions ARRAY NOT NULL CHECK (array_length(permissions, 1) > 0),
  expires_at timestamp with time zone,
  rate_limit integer DEFAULT 1000 CHECK (rate_limit > 0),
  organization_id uuid NOT NULL,
  is_active boolean DEFAULT true,
  usage_count bigint DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  last_used_at timestamp with time zone,
  revoked_at timestamp with time zone,
  CONSTRAINT api_keys_pkey PRIMARY KEY (id),
  CONSTRAINT api_keys_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id)
);
CREATE TABLE public.audit_logs (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  actor_user_id uuid NOT NULL,
  action_type text NOT NULL,
  resource_type text,
  resource_id uuid,
  action_timestamp timestamp with time zone DEFAULT now(),
  details jsonb,
  ip_address text,
  user_agent text,
  organization_id uuid,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT audit_logs_pkey PRIMARY KEY (id),
  CONSTRAINT audit_logs_actor_user_id_fkey FOREIGN KEY (actor_user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.base_modules (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  slug character varying NOT NULL UNIQUE CHECK (slug::text ~ '^[a-z0-9-]+$'::text),
  name character varying NOT NULL,
  description text,
  category character varying NOT NULL,
  is_active boolean DEFAULT true,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  icon character varying,
  route_pattern character varying,
  permissions_required ARRAY,
  supports_multi_tenant boolean DEFAULT true,
  config_schema jsonb DEFAULT '{}'::jsonb,
  archived_at timestamp with time zone,
  deleted_at timestamp with time zone,
  created_by text,
  dependencies text,
  status text,
  tags text,
  version text,
  CONSTRAINT base_modules_pkey PRIMARY KEY (id)
);
CREATE TABLE public.business_entities (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  organization_id uuid NOT NULL,
  entity_type character varying NOT NULL,
  business_domain character varying NOT NULL DEFAULT 'general'::character varying,
  name text NOT NULL,
  code character varying,
  description text,
  status USER-DEFINED NOT NULL DEFAULT 'ACTIVE'::entity_status,
  metadata jsonb NOT NULL DEFAULT '{}'::jsonb,
  custom_fields jsonb NOT NULL DEFAULT '{}'::jsonb,
  version integer NOT NULL DEFAULT 1,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  created_by uuid,
  updated_by uuid,
  CONSTRAINT business_entities_pkey PRIMARY KEY (id),
  CONSTRAINT business_entities_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id)
);
CREATE TABLE public.business_relationships (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  organization_id uuid NOT NULL,
  business_domain character varying NOT NULL DEFAULT 'general'::character varying,
  source_entity_id uuid NOT NULL,
  target_entity_id uuid NOT NULL,
  relationship_type character varying NOT NULL,
  metadata jsonb NOT NULL DEFAULT '{}'::jsonb,
  custom_fields jsonb NOT NULL DEFAULT '{}'::jsonb,
  is_active boolean NOT NULL DEFAULT true,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  created_by uuid,
  CONSTRAINT business_relationships_pkey PRIMARY KEY (id),
  CONSTRAINT fk_source_entity FOREIGN KEY (source_entity_id) REFERENCES public.business_entities(id),
  CONSTRAINT fk_target_entity FOREIGN KEY (target_entity_id) REFERENCES public.business_entities(id),
  CONSTRAINT business_relationships_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id)
);
CREATE TABLE public.business_transaction_items (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  organization_id uuid NOT NULL,
  transaction_id uuid NOT NULL,
  entity_id uuid,
  item_sequence integer NOT NULL,
  metadata jsonb NOT NULL DEFAULT '{}'::jsonb,
  custom_fields jsonb NOT NULL DEFAULT '{}'::jsonb,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT business_transaction_items_pkey PRIMARY KEY (id),
  CONSTRAINT business_transaction_items_transaction_id_fkey FOREIGN KEY (transaction_id) REFERENCES public.business_transactions(id),
  CONSTRAINT business_transaction_items_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id),
  CONSTRAINT business_transaction_items_entity_id_fkey FOREIGN KEY (entity_id) REFERENCES public.business_entities(id)
);
CREATE TABLE public.business_transactions (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  organization_id uuid NOT NULL,
  business_domain character varying NOT NULL DEFAULT 'general'::character varying,
  transaction_type character varying NOT NULL,
  transaction_number character varying,
  reference_code character varying,
  status USER-DEFINED NOT NULL DEFAULT 'DRAFT'::transaction_status,
  metadata jsonb NOT NULL DEFAULT '{}'::jsonb,
  custom_fields jsonb NOT NULL DEFAULT '{}'::jsonb,
  version integer NOT NULL DEFAULT 1,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  created_by uuid,
  updated_by uuid,
  CONSTRAINT business_transactions_pkey PRIMARY KEY (id),
  CONSTRAINT business_transactions_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id)
);
CREATE TABLE public.custom_modules (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  organization_id uuid,
  module_name text NOT NULL,
  module_version text DEFAULT '1.0.0'::text,
  custom_code_path text,
  api_endpoints jsonb DEFAULT '[]'::jsonb,
  configuration jsonb DEFAULT '{}'::jsonb,
  deployed_at timestamp with time zone DEFAULT now(),
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT custom_modules_pkey PRIMARY KEY (id),
  CONSTRAINT custom_modules_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id)
);
CREATE TABLE public.daily_metrics (
  day date NOT NULL,
  sales numeric NOT NULL DEFAULT 0,
  margin numeric NOT NULL DEFAULT 0 CHECK (margin >= 0::numeric AND margin <= 100::numeric),
  cover_days numeric NOT NULL DEFAULT 0 CHECK (cover_days >= 0::numeric),
  sell_through numeric NOT NULL DEFAULT 0 CHECK (sell_through >= 0::numeric AND sell_through <= 100::numeric),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT daily_metrics_pkey PRIMARY KEY (day)
);
CREATE TABLE public.dashboard_widgets (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  title character varying NOT NULL,
  description text,
  component_path character varying NOT NULL,
  module_id character varying NOT NULL,
  query_type character varying NOT NULL CHECK (query_type::text = ANY (ARRAY['rpc'::character varying, 'rest'::character varying, 'sql'::character varying]::text[])),
  query_config jsonb NOT NULL DEFAULT '{}'::jsonb,
  default_params jsonb DEFAULT '{}'::jsonb,
  default_width integer DEFAULT 4 CHECK (default_width >= 1 AND default_width <= 12),
  default_height integer DEFAULT 4 CHECK (default_height >= 1 AND default_height <= 20),
  category character varying,
  tags ARRAY,
  version character varying DEFAULT '1.0.0'::character varying,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT dashboard_widgets_pkey PRIMARY KEY (id)
);
CREATE TABLE public.debug_logs (
  id integer NOT NULL DEFAULT nextval('debug_logs_id_seq'::regclass),
  log_message text,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT debug_logs_pkey PRIMARY KEY (id)
);
CREATE TABLE public.delivery_tracking (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  order_id uuid NOT NULL,
  supplier_id uuid NOT NULL,
  expected_delivery_date date,
  actual_delivery_date date,
  lead_time_days numeric,
  delivery_status text NOT NULL CHECK (delivery_status = ANY (ARRAY['pending'::text, 'in_transit'::text, 'delivered'::text, 'delayed'::text, 'cancelled'::text])),
  delay_reason text,
  quality_rating integer CHECK (quality_rating >= 1 AND quality_rating <= 5),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT delivery_tracking_pkey PRIMARY KEY (id)
);
CREATE TABLE public.implementation_templates (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  description text,
  client_type text CHECK (client_type = ANY (ARRAY['custom'::text, 'standard'::text])),
  base_modules jsonb DEFAULT '[]'::jsonb,
  customization_points jsonb DEFAULT '{}'::jsonb,
  example_config jsonb DEFAULT '{}'::jsonb,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT implementation_templates_pkey PRIMARY KEY (id)
);
CREATE TABLE public.legacy_core_modules (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  slug character varying NOT NULL UNIQUE CHECK (slug::text ~ '^[a-z0-9-]+$'::text),
  name character varying NOT NULL,
  description text,
  category character varying NOT NULL CHECK (category::text = ANY (ARRAY['analytics'::character varying, 'operations'::character varying, 'insights'::character varying, 'reports'::character varying, 'settings'::character varying, 'admin'::character varying]::text[])),
  version character varying DEFAULT '1.0.0'::character varying,
  maturity_status character varying DEFAULT 'BETA'::character varying CHECK (maturity_status::text = ANY (ARRAY['ALPHA'::character varying, 'BETA'::character varying, 'GA'::character varying, 'DEPRECATED'::character varying]::text[])),
  pricing_tier character varying DEFAULT 'FREE'::character varying CHECK (pricing_tier::text = ANY (ARRAY['FREE'::character varying, 'PREMIUM'::character varying, 'ENTERPRISE'::character varying]::text[])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  is_deleted boolean NOT NULL DEFAULT false,
  deleted_at timestamp with time zone,
  is_archived boolean NOT NULL DEFAULT false,
  archived_at timestamp with time zone,
  technical_type character varying NOT NULL DEFAULT 'full-stack'::character varying CHECK (technical_type::text = ANY (ARRAY['frontend'::character varying, 'backend'::character varying, 'full-stack'::character varying, 'integration'::character varying, 'data-processing'::character varying, 'automation'::character varying]::text[])),
  complexity_level character varying NOT NULL DEFAULT 'medium'::character varying CHECK (complexity_level::text = ANY (ARRAY['basic'::character varying, 'medium'::character varying, 'advanced'::character varying, 'enterprise'::character varying]::text[])),
  tech_tags jsonb NOT NULL DEFAULT '[]'::jsonb,
  client_scope character varying NOT NULL DEFAULT 'multi-client'::character varying CHECK (client_scope::text = ANY (ARRAY['single-client'::character varying, 'multi-client'::character varying, 'client-agnostic'::character varying]::text[])),
  primary_client character varying DEFAULT NULL::character varying,
  industry_vertical character varying NOT NULL DEFAULT 'generic'::character varying CHECK (industry_vertical::text = ANY (ARRAY['fashion'::character varying, 'retail'::character varying, 'manufacturing'::character varying, 'logistics'::character varying, 'generic'::character varying]::text[])),
  functional_category character varying NOT NULL DEFAULT 'standard'::character varying CHECK (functional_category::text = ANY (ARRAY['analytics'::character varying, 'inventory'::character varying, 'alerts'::character varying, 'performance'::character varying, 'reports'::character varying, 'integrations'::character varying, 'workflows'::character varying, 'standard'::character varying]::text[])),
  CONSTRAINT legacy_core_modules_pkey PRIMARY KEY (id)
);
CREATE TABLE public.legacy_module_implementations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  module_id uuid,
  module_type character varying NOT NULL,
  component_path character varying NOT NULL,
  display_name character varying,
  icon_name character varying,
  permissions ARRAY DEFAULT ARRAY[]::text[],
  config jsonb DEFAULT '{}'::jsonb,
  is_available boolean DEFAULT true,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  customization_level character varying NOT NULL DEFAULT 'standard'::character varying CHECK (customization_level::text = ANY (ARRAY['standard'::character varying, 'customized'::character varying, 'highly-customized'::character varying, 'client-specific'::character varying]::text[])),
  implementation_notes text,
  CONSTRAINT legacy_module_implementations_pkey PRIMARY KEY (id),
  CONSTRAINT fk_module_implementations_core_modules FOREIGN KEY (module_id) REFERENCES public.legacy_core_modules(id)
);
CREATE TABLE public.legacy_tenant_modules (
  organization_id uuid NOT NULL,
  module_id uuid NOT NULL,
  implementation_id uuid,
  operational_status USER-DEFINED,
  is_visible boolean,
  custom_config jsonb,
  installed_at timestamp without time zone,
  last_accessed_at timestamp without time zone,
  version_id uuid,
  activated_at timestamp with time zone,
  updated_at timestamp with time zone,
  last_status_change timestamp with time zone,
  status_change_reason text,
  approval_requested_at timestamp with time zone,
  approved_by uuid,
  approved_at timestamp with time zone,
  provisioning_started_at timestamp with time zone,
  provisioning_completed_at timestamp with time zone,
  last_health_check timestamp with time zone,
  health_status text,
  error_details jsonb,
  retry_count integer,
  billing_enabled boolean,
  usage_limits jsonb,
  current_usage jsonb,
  auto_upgrade boolean,
  locked_version boolean,
  module_name text,
  module_type text,
  status text DEFAULT 'planned'::text,
  configuration jsonb DEFAULT '{}'::jsonb,
  expected_features ARRAY DEFAULT '{}'::text[],
  implementation_notes text,
  priority text DEFAULT 'medium'::text,
  created_at timestamp with time zone DEFAULT now(),
  implemented_at timestamp with time zone,
  file_path text,
  file_last_seen timestamp with time zone DEFAULT now(),
  file_hash text,
  missing_since timestamp with time zone,
  missing_notified boolean DEFAULT false,
  module_version text DEFAULT '1.0.0'::text,
  archived_at timestamp with time zone,
  archive_reason text,
  reactivated_at timestamp with time zone,
  is_available boolean DEFAULT true,
  CONSTRAINT legacy_tenant_modules_pkey PRIMARY KEY (organization_id, module_id),
  CONSTRAINT fk_tenant_modules_core_modules FOREIGN KEY (module_id) REFERENCES public.legacy_core_modules(id),
  CONSTRAINT fk_tenant_modules_organizations FOREIGN KEY (organization_id) REFERENCES public.organizations(id)
);
CREATE TABLE public.login_attempt_history (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  email text NOT NULL,
  ip_address inet,
  user_agent text,
  success boolean NOT NULL,
  failure_reason text,
  attempted_at timestamp with time zone NOT NULL DEFAULT now(),
  device_fingerprint text,
  CONSTRAINT login_attempt_history_pkey PRIMARY KEY (id),
  CONSTRAINT login_attempt_history_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.metrics_cache (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  cache_key text NOT NULL UNIQUE,
  metric_type text NOT NULL,
  filters jsonb DEFAULT '{}'::jsonb,
  data jsonb NOT NULL,
  expires_at timestamp with time zone NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT metrics_cache_pkey PRIMARY KEY (id)
);
CREATE TABLE public.migration_log (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  migration_log text,
  migration_step text,
  notes text,
  status text,
  CONSTRAINT migration_log_pkey PRIMARY KEY (id)
);
CREATE TABLE public.module_approval_requests (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  organization_id uuid NOT NULL,
  module_id text NOT NULL,
  requested_by uuid NOT NULL,
  request_reason text,
  request_metadata jsonb DEFAULT '{}'::jsonb,
  status text DEFAULT 'PENDING'::text CHECK (status = ANY (ARRAY['PENDING'::text, 'APPROVED'::text, 'DENIED'::text, 'CANCELLED'::text])),
  reviewed_by uuid,
  review_notes text,
  reviewed_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT module_approval_requests_pkey PRIMARY KEY (id),
  CONSTRAINT module_approval_requests_reviewed_by_fkey FOREIGN KEY (reviewed_by) REFERENCES auth.users(id),
  CONSTRAINT module_approval_requests_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id),
  CONSTRAINT module_approval_requests_requested_by_fkey FOREIGN KEY (requested_by) REFERENCES auth.users(id)
);
CREATE TABLE public.module_deployments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  organization_id uuid NOT NULL,
  module_id uuid NOT NULL,
  target_version text NOT NULL,
  deployment_type text NOT NULL CHECK (deployment_type = ANY (ARRAY['install'::text, 'upgrade'::text, 'downgrade'::text])),
  status text NOT NULL DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'validating'::text, 'deploying'::text, 'migrating'::text, 'testing'::text, 'completed'::text, 'failed'::text, 'rolled_back'::text, 'cancelled'::text])),
  force_deploy boolean DEFAULT false,
  skip_validation boolean DEFAULT false,
  rollback_on_failure boolean DEFAULT true,
  started_at timestamp with time zone NOT NULL DEFAULT now(),
  completed_at timestamp with time zone,
  updated_at timestamp with time zone DEFAULT now(),
  error_message text,
  rollback_version text,
  validation_results jsonb DEFAULT '[]'::jsonb,
  migration_logs jsonb DEFAULT '[]'::jsonb,
  CONSTRAINT module_deployments_pkey PRIMARY KEY (id),
  CONSTRAINT module_deployments_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id)
);
CREATE TABLE public.module_file_audit (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  module_id text NOT NULL,
  organization_id uuid,
  event_type text NOT NULL CHECK (event_type = ANY (ARRAY['discovered'::text, 'updated'::text, 'missing'::text, 'restored'::text, 'archived'::text, 'reactivated'::text])),
  file_path text,
  file_hash text,
  previous_hash text,
  previous_status text,
  new_status text,
  impact_level text CHECK (impact_level = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text, 'critical'::text])),
  detected_at timestamp with time zone DEFAULT now(),
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT module_file_audit_pkey PRIMARY KEY (id),
  CONSTRAINT module_file_audit_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id)
);
CREATE TABLE public.module_implementations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  base_module_id uuid,
  implementation_key character varying NOT NULL CHECK (implementation_key::text ~ '^[a-z0-9-]+$'::text),
  component_path character varying NOT NULL,
  is_default boolean DEFAULT false,
  is_active boolean DEFAULT true,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  component_type character varying DEFAULT 'file'::character varying CHECK (component_type::text = ANY (ARRAY['file'::character varying, 'generated'::character varying]::text[])),
  template_type character varying CHECK (template_type IS NULL OR (template_type::text = ANY (ARRAY['dashboard'::character varying, 'table'::character varying, 'chart'::character varying, 'form'::character varying, 'custom'::character varying]::text[]))),
  template_config jsonb DEFAULT '{}'::jsonb,
  dependencies ARRAY,
  config_schema_override jsonb,
  archived_at timestamp with time zone,
  deleted_at timestamp with time zone,
  name character varying,
  description text,
  version text,
  audience character varying DEFAULT 'generic'::character varying,
  complexity character varying DEFAULT 'standard'::character varying,
  priority character varying DEFAULT 'medium'::character varying,
  status character varying DEFAULT 'active'::character varying,
  created_by uuid,
  CONSTRAINT module_implementations_pkey PRIMARY KEY (id),
  CONSTRAINT module_implementations_base_module_id_fkey FOREIGN KEY (base_module_id) REFERENCES public.base_modules(id)
);
CREATE TABLE public.module_navigation (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  implementation_id uuid,
  nav_type character varying NOT NULL DEFAULT 'direct'::character varying,
  nav_title character varying NOT NULL,
  nav_order integer DEFAULT 0,
  parent_id uuid,
  route_path character varying,
  is_external boolean DEFAULT false,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  CONSTRAINT module_navigation_pkey PRIMARY KEY (id),
  CONSTRAINT module_navigation_implementation_id_fkey FOREIGN KEY (implementation_id) REFERENCES public.legacy_module_implementations(id),
  CONSTRAINT module_navigation_parent_id_fkey FOREIGN KEY (parent_id) REFERENCES public.module_navigation(id)
);
CREATE TABLE public.module_usage_logs (
  id bigint NOT NULL DEFAULT nextval('module_usage_logs_id_seq'::regclass),
  organization_id uuid NOT NULL,
  module_id uuid NOT NULL,
  user_id uuid,
  route text,
  tokens_consumed integer,
  cost_estimate numeric,
  latency_ms integer,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT module_usage_logs_pkey PRIMARY KEY (id)
);
CREATE TABLE public.organization_modules (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  organization_id uuid NOT NULL,
  module_id text NOT NULL,
  module_name text NOT NULL,
  module_type text NOT NULL CHECK (module_type = ANY (ARRAY['standard'::text, 'custom'::text])),
  status text NOT NULL DEFAULT 'planned'::text CHECK (status = ANY (ARRAY['planned'::text, 'implemented'::text, 'active'::text, 'inactive'::text, 'cancelled'::text, 'paused'::text])),
  configuration jsonb DEFAULT '{}'::jsonb,
  expected_features ARRAY DEFAULT '{}'::text[],
  implementation_notes text,
  priority text DEFAULT 'medium'::text CHECK (priority = ANY (ARRAY['high'::text, 'medium'::text, 'low'::text])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  implemented_at timestamp with time zone,
  activated_at timestamp with time zone,
  file_path text,
  file_last_seen timestamp with time zone DEFAULT now(),
  file_hash text,
  missing_since timestamp with time zone,
  missing_notified boolean DEFAULT false,
  module_version text DEFAULT '1.0.0'::text,
  locked_version boolean DEFAULT false,
  archived_at timestamp with time zone,
  archive_reason text,
  reactivated_at timestamp with time zone,
  is_available boolean NOT NULL DEFAULT true,
  CONSTRAINT organization_modules_pkey PRIMARY KEY (id),
  CONSTRAINT organization_modules_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id)
);
CREATE TABLE public.organizations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  company_legal_name text,
  company_trading_name text,
  cnpj text,
  state_registration text,
  address_street text,
  address_number text,
  address_complement text,
  address_neighborhood text,
  address_city text,
  address_state_province text,
  address_postal_code text,
  default_timezone text DEFAULT 'America/Fortaleza'::text,
  default_currency text DEFAULT 'BRL'::text,
  idle_product_threshold_days integer,
  min_stock_coverage_alert_days integer,
  min_acceptable_margin_percentage numeric,
  default_export_format text DEFAULT 'csv'::text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  client_type text DEFAULT 'standard'::text CHECK (client_type = ANY (ARRAY['custom'::text, 'standard'::text])),
  implementation_config jsonb DEFAULT '{}'::jsonb CHECK (length(implementation_config::text) <= 1048576),
  custom_backend_url text,
  is_implementation_complete boolean DEFAULT false,
  implementation_date timestamp with time zone,
  implementation_team_notes text,
  deleted_at timestamp with time zone,
  slug text NOT NULL,
  status text CHECK (status = ANY (ARRAY['active'::text, 'inactive'::text, 'suspended'::text])),
  module_strategy jsonb DEFAULT '{"approach": "planned", "last_scan": null, "auto_discovery": true, "expected_modules": [], "implementation_priority": "high"}'::jsonb,
  tenant_type USER-DEFINED DEFAULT 'STANDARD'::tenant_type,
  beta_features_enabled boolean DEFAULT false,
  internal_tester boolean DEFAULT false,
  is_active boolean NOT NULL DEFAULT true,
  CONSTRAINT organizations_pkey PRIMARY KEY (id)
);
CREATE TABLE public.profiles (
  id uuid NOT NULL,
  organization_id uuid,
  role USER-DEFINED NOT NULL DEFAULT 'editor'::role_enum,
  first_name text,
  last_name text,
  username text UNIQUE,
  date_of_birth date,
  avatar_url text,
  job_title text,
  team_id uuid,
  deleted_at timestamp with time zone,
  is_2fa_enabled boolean NOT NULL DEFAULT false,
  prefers_email_notifications boolean NOT NULL DEFAULT true,
  prefers_push_notifications boolean NOT NULL DEFAULT true,
  theme text NOT NULL DEFAULT 'light'::text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  is_setup_complete boolean NOT NULL DEFAULT false,
  phone text,
  location text,
  team text,
  status USER-DEFINED NOT NULL DEFAULT 'PENDING'::user_status_enum,
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id),
  CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id)
);
CREATE TABLE public.projected_coverage (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  variant_id uuid NOT NULL,
  location_id uuid NOT NULL,
  analysis_date date NOT NULL,
  current_stock integer NOT NULL DEFAULT 0,
  avg_daily_sales numeric NOT NULL DEFAULT 0,
  projected_days_coverage numeric NOT NULL DEFAULT 0,
  projected_stockout_date date,
  risk_level text DEFAULT 'low'::text CHECK (risk_level = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text, 'critical'::text])),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT projected_coverage_pkey PRIMARY KEY (id)
);
CREATE TABLE public.promotion_recommendations (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  variant_id uuid NOT NULL,
  location_id uuid,
  analysis_date date NOT NULL,
  reason_code text NOT NULL CHECK (reason_code = ANY (ARRAY['slow_moving'::text, 'excess_inventory'::text, 'seasonal_clearance'::text, 'margin_optimization'::text])),
  recommended_discount_percentage numeric NOT NULL,
  estimated_lift_percentage numeric NOT NULL DEFAULT 0,
  recommended_duration_days integer NOT NULL DEFAULT 7,
  expected_margin_impact numeric NOT NULL DEFAULT 0,
  expected_revenue_impact numeric NOT NULL DEFAULT 0,
  priority_score numeric NOT NULL DEFAULT 0,
  status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'approved'::text, 'active'::text, 'completed'::text, 'rejected'::text])),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT promotion_recommendations_pkey PRIMARY KEY (id)
);
CREATE TABLE public.rls_audit_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  timestamp timestamp with time zone NOT NULL DEFAULT now(),
  user_id uuid NOT NULL,
  organization_id uuid NOT NULL,
  operation_type USER-DEFINED NOT NULL,
  entity_type USER-DEFINED NOT NULL,
  entity_id text NOT NULL,
  old_data jsonb,
  new_data jsonb,
  ip_address text,
  user_agent text,
  success boolean NOT NULL,
  error_message text,
  request_id uuid DEFAULT gen_random_uuid(),
  CONSTRAINT rls_audit_logs_pkey PRIMARY KEY (id),
  CONSTRAINT rls_audit_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT rls_audit_logs_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id)
);
CREATE TABLE public.secrets (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL UNIQUE,
  value text NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  expires_at timestamp with time zone,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_by uuid,
  updated_by uuid,
  CONSTRAINT secrets_pkey PRIMARY KEY (id),
  CONSTRAINT secrets_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id),
  CONSTRAINT secrets_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES auth.users(id)
);
CREATE TABLE public.security_alert_settings (
  user_id uuid NOT NULL,
  alert_new_device boolean NOT NULL DEFAULT true,
  alert_failed_attempts boolean NOT NULL DEFAULT true,
  alert_user_deletion boolean NOT NULL DEFAULT true,
  failed_attempts_threshold integer NOT NULL DEFAULT 3 CHECK (failed_attempts_threshold >= 2 AND failed_attempts_threshold <= 10),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT security_alert_settings_pkey PRIMARY KEY (user_id),
  CONSTRAINT security_alert_settings_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.tenant_business_entities (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  organization_id uuid NOT NULL,
  entity_type text NOT NULL,
  external_id text NOT NULL,
  attributes jsonb NOT NULL DEFAULT '{}'::jsonb,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  deleted_at timestamp with time zone,
  CONSTRAINT tenant_business_entities_pkey PRIMARY KEY (id),
  CONSTRAINT fk_tenant_business_entities_organization_id FOREIGN KEY (organization_id) REFERENCES public.organizations(id)
);
CREATE TABLE public.tenant_business_relationships (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  organization_id uuid NOT NULL,
  source_id uuid NOT NULL,
  target_id uuid NOT NULL,
  relationship_type text NOT NULL,
  attributes jsonb NOT NULL DEFAULT '{}'::jsonb,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  deleted_at timestamp with time zone,
  CONSTRAINT tenant_business_relationships_pkey PRIMARY KEY (id),
  CONSTRAINT fk_tenant_business_relationships_organization_id FOREIGN KEY (organization_id) REFERENCES public.organizations(id)
);
CREATE TABLE public.tenant_business_transactions (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  organization_id uuid NOT NULL,
  transaction_type text NOT NULL,
  external_id text,
  status text NOT NULL,
  attributes jsonb NOT NULL DEFAULT '{}'::jsonb,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  deleted_at timestamp with time zone,
  CONSTRAINT tenant_business_transactions_pkey PRIMARY KEY (id),
  CONSTRAINT fk_tenant_business_transactions_organization_id FOREIGN KEY (organization_id) REFERENCES public.organizations(id)
);
CREATE TABLE public.tenant_dashboard_widgets (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  tenant_id uuid NOT NULL,
  widget_id uuid NOT NULL,
  enabled boolean DEFAULT true,
  position_x integer DEFAULT 0 CHECK (position_x >= 0),
  position_y integer DEFAULT 0 CHECK (position_y >= 0),
  width integer DEFAULT 4 CHECK (width >= 1 AND width <= 12),
  height integer DEFAULT 4 CHECK (height >= 1 AND height <= 20),
  custom_params jsonb DEFAULT '{}'::jsonb,
  display_order integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT tenant_dashboard_widgets_pkey PRIMARY KEY (id),
  CONSTRAINT tenant_dashboard_widgets_widget_id_fkey FOREIGN KEY (widget_id) REFERENCES public.dashboard_widgets(id)
);
CREATE TABLE public.tenant_module_assignments (
  tenant_id uuid NOT NULL,
  base_module_id uuid NOT NULL,
  implementation_id uuid,
  is_active boolean DEFAULT true,
  custom_config jsonb DEFAULT '{}'::jsonb CHECK (jsonb_typeof(custom_config) = 'object'::text),
  assigned_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  permissions_override ARRAY,
  user_groups ARRAY,
  activation_date timestamp without time zone,
  deactivation_date timestamp without time zone,
  config_schema jsonb,
  assigned_by text NOT NULL,
  CONSTRAINT tenant_module_assignments_pkey PRIMARY KEY (tenant_id, base_module_id),
  CONSTRAINT tenant_module_assignments_implementation_id_fkey FOREIGN KEY (implementation_id) REFERENCES public.module_implementations(id),
  CONSTRAINT tenant_module_assignments_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.organizations(id),
  CONSTRAINT tenant_module_assignments_base_module_id_fkey FOREIGN KEY (base_module_id) REFERENCES public.base_modules(id)
);
CREATE TABLE public.tenant_module_settings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  organization_id uuid NOT NULL,
  module_id uuid NOT NULL,
  settings jsonb NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone,
  CONSTRAINT tenant_module_settings_pkey PRIMARY KEY (id)
);
CREATE TABLE public.tenant_module_status_history (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  organization_id uuid NOT NULL,
  module_id text NOT NULL,
  previous_status USER-DEFINED,
  new_status USER-DEFINED NOT NULL,
  changed_by uuid,
  change_reason text,
  change_metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT tenant_module_status_history_pkey PRIMARY KEY (id),
  CONSTRAINT tenant_module_status_history_changed_by_fkey FOREIGN KEY (changed_by) REFERENCES auth.users(id)
);
CREATE TABLE public.tenant_snapshots (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  organization_id uuid NOT NULL,
  snapshot_type character varying NOT NULL,
  snapshot_key character varying NOT NULL,
  snapshot_value jsonb NOT NULL,
  snapshot_date date NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT tenant_snapshots_pkey PRIMARY KEY (id),
  CONSTRAINT tenant_snapshots_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id)
);
CREATE TABLE public.user_consents (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  consent_type text NOT NULL,
  version text NOT NULL DEFAULT '1.0'::text,
  accepted_at timestamp with time zone NOT NULL DEFAULT now(),
  ip_address inet,
  user_agent text,
  organization_id uuid,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT user_consents_pkey PRIMARY KEY (id),
  CONSTRAINT user_consents_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT user_consents_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id)
);
CREATE TABLE public.user_data_exports (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  format USER-DEFINED NOT NULL,
  status USER-DEFINED DEFAULT 'requested'::export_status_enum,
  download_token text UNIQUE,
  file_url text,
  file_size_bytes bigint,
  download_count integer DEFAULT 0,
  max_downloads integer DEFAULT 1,
  expires_at timestamp with time zone DEFAULT (now() + '24:00:00'::interval),
  created_at timestamp with time zone DEFAULT now(),
  completed_at timestamp with time zone,
  downloaded_at timestamp with time zone,
  error_message text,
  CONSTRAINT user_data_exports_pkey PRIMARY KEY (id),
  CONSTRAINT user_data_exports_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_deletion_requests (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  status USER-DEFINED DEFAULT 'pending'::deletion_status_enum,
  verification_token text UNIQUE,
  token_expires_at timestamp with time zone,
  scheduled_deletion_date timestamp with time zone,
  password_verified_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  cancelled_at timestamp with time zone,
  completed_at timestamp with time zone,
  cancellation_reason text,
  completion_details jsonb,
  CONSTRAINT user_deletion_requests_pkey PRIMARY KEY (id),
  CONSTRAINT user_deletion_requests_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_invites (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone,
  user_id uuid NOT NULL DEFAULT gen_random_uuid(),
  email text NOT NULL,
  status text NOT NULL,
  expires_at timestamp with time zone NOT NULL,
  role USER-DEFINED NOT NULL,
  organization_id uuid NOT NULL,
  CONSTRAINT user_invites_pkey PRIMARY KEY (id, user_id),
  CONSTRAINT user_invites_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT user_invites_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id)
);
CREATE TABLE public.user_known_devices (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  device_fingerprint text NOT NULL,
  user_agent text,
  first_seen_at timestamp with time zone NOT NULL DEFAULT now(),
  last_seen_at timestamp with time zone NOT NULL DEFAULT now(),
  is_trusted boolean NOT NULL DEFAULT true,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT user_known_devices_pkey PRIMARY KEY (id),
  CONSTRAINT user_known_devices_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_login_history (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  ip_address text,
  user_agent text,
  location text,
  logged_in_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT user_login_history_pkey PRIMARY KEY (id),
  CONSTRAINT user_login_history_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_sessions (
  id uuid NOT NULL,
  user_id uuid NOT NULL,
  created_at timestamp with time zone,
  updated_at timestamp with time zone,
  user_agent text,
  ip inet,
  CONSTRAINT user_sessions_pkey PRIMARY KEY (id)
);
CREATE TABLE public.webhook_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  webhook_flow text NOT NULL CHECK (webhook_flow = ANY (ARRAY['sales'::text, 'purchase'::text, 'inventory'::text, 'transfer'::text])),
  event_type text NOT NULL,
  payload jsonb NOT NULL DEFAULT '{}'::jsonb,
  status text NOT NULL CHECK (status = ANY (ARRAY['success'::text, 'error'::text, 'pending'::text, 'timeout'::text])),
  response_data jsonb,
  error_message text,
  processing_time_ms integer,
  source_ip text,
  user_agent text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  error_stack text,
  CONSTRAINT webhook_logs_pkey PRIMARY KEY (id)
);
CREATE TABLE public.webhook_metrics (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  date date NOT NULL,
  webhook_flow text NOT NULL,
  total_events integer NOT NULL DEFAULT 0,
  successful_events integer NOT NULL DEFAULT 0,
  failed_events integer NOT NULL DEFAULT 0,
  avg_processing_time_ms numeric,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT webhook_metrics_pkey PRIMARY KEY (id)
);
CREATE TABLE public.widget_instances (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  widget_id uuid,
  user_id uuid NOT NULL,
  position integer NOT NULL,
  custom_config jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT widget_instances_pkey PRIMARY KEY (id),
  CONSTRAINT widget_instances_widget_id_fkey FOREIGN KEY (widget_id) REFERENCES public.widgets(id)
);
CREATE TABLE public.widgets (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name character varying NOT NULL,
  type USER-DEFINED NOT NULL,
  config jsonb NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT widgets_pkey PRIMARY KEY (id)
);