-- ================================================
-- SCRIPT: Limpeza de Tabelas Core_ Migradas
-- Projeto: Banban - Limpeza P√≥s-Migra√ß√£o Gen√©rica
-- Data: $(date)
-- ================================================

-- IMPORTANTE: Este script remove as tabelas core_ que j√° foram migradas
-- para o sistema gen√©rico tenant_business_*
-- Baseado no GENERIC_TABLES_MIGRATION_REPORT.md

BEGIN;

-- ================================================
-- 1. VERIFICAR SE MIGRA√á√ÉO FOI APLICADA
-- ================================================

-- Verificar se as tabelas gen√©ricas existem e t√™m dados
DO $$
DECLARE
    entity_count INTEGER;
    relationship_count INTEGER;
    transaction_count INTEGER;
BEGIN
    -- Verificar tenant_business_entities
    SELECT COUNT(*) INTO entity_count FROM tenant_business_entities;
    
    -- Verificar tenant_business_relationships  
    SELECT COUNT(*) INTO relationship_count FROM tenant_business_relationships;
    
    -- Verificar tenant_business_transactions
    SELECT COUNT(*) INTO transaction_count FROM tenant_business_transactions;
    
    RAISE NOTICE 'STATUS DA MIGRA√á√ÉO:';
    RAISE NOTICE '- tenant_business_entities: % registros', entity_count;
    RAISE NOTICE '- tenant_business_relationships: % registros', relationship_count;
    RAISE NOTICE '- tenant_business_transactions: % registros', transaction_count;
    
    -- Se n√£o h√° dados nas tabelas gen√©ricas, abortar
    IF entity_count = 0 AND relationship_count = 0 AND transaction_count = 0 THEN
        RAISE EXCEPTION 'ERRO: Tabelas gen√©ricas est√£o vazias. Migra√ß√£o pode n√£o ter sido aplicada.';
    END IF;
    
    RAISE NOTICE 'VERIFICA√á√ÉO: Migra√ß√£o confirmada, prosseguindo com limpeza...';
END $$;

-- ================================================
-- 2. BACKUP DOS DADOS (OPCIONAL - PARA SEGURAN√áA)
-- ================================================

-- Criar tabelas de backup tempor√°rias se necess√°rio
CREATE TABLE IF NOT EXISTS _backup_core_products AS SELECT * FROM core_products;
CREATE TABLE IF NOT EXISTS _backup_core_suppliers AS SELECT * FROM core_suppliers;
CREATE TABLE IF NOT EXISTS _backup_core_locations AS SELECT * FROM core_locations;
CREATE TABLE IF NOT EXISTS _backup_core_product_variants AS SELECT * FROM core_product_variants;

RAISE NOTICE 'BACKUP: Tabelas de backup criadas com prefixo _backup_';

-- ================================================
-- 3. DELETAR TABELAS VAZIAS E N√ÉO UTILIZADAS
-- ================================================

-- Tabelas completamente vazias e sem uso
DROP TABLE IF EXISTS alert_history CASCADE;
DROP TABLE IF EXISTS performance_metrics CASCADE;

RAISE NOTICE 'LIMPEZA: Tabelas vazias removidas (alert_history, performance_metrics)';

-- ================================================
-- 4. DELETAR TABELAS CORE_ MIGRADAS
-- ================================================

-- IMPORTANTE: Estas tabelas foram migradas para tenant_business_entities
-- e s√£o acessadas via views de compatibilidade

-- Deletar relacionamentos/depend√™ncias primeiro
DROP TABLE IF EXISTS abc_analysis CASCADE;

-- Deletar tabelas core_ principais (em ordem de depend√™ncias)
DROP TABLE IF EXISTS core_product_variants CASCADE;
DROP TABLE IF EXISTS core_products CASCADE;
DROP TABLE IF EXISTS core_suppliers CASCADE;
DROP TABLE IF EXISTS core_locations CASCADE;

-- Deletar outras tabelas core_ relacionadas se existirem
DROP TABLE IF EXISTS core_orders CASCADE;
DROP TABLE IF EXISTS core_documents CASCADE;
DROP TABLE IF EXISTS core_movements CASCADE;

RAISE NOTICE 'MIGRA√á√ÉO: Tabelas core_ removidas (dados preservados em tenant_business_*)';

-- ================================================
-- 5. VERIFICA√á√ÉO FINAL
-- ================================================

-- Listar tabelas restantes que come√ßam com 'core_'
SELECT 'TABELAS CORE_ RESTANTES:' as status;
SELECT 
    table_name,
    table_type
FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_name LIKE 'core_%'
ORDER BY table_name;

-- Verificar se views de compatibilidade ainda funcionam
SELECT 'VERIFICA√á√ÉO DAS VIEWS DE COMPATIBILIDADE:' as status;
SELECT 
    'core_products_compat' as view_name,
    COUNT(*) as record_count
FROM core_products_compat
UNION ALL
SELECT 
    'core_suppliers_compat' as view_name,
    COUNT(*) as record_count
FROM core_suppliers_compat
UNION ALL
SELECT 
    'tenant_inventory_items_compat' as view_name,
    COUNT(*) as record_count
FROM tenant_inventory_items_compat;

COMMIT;

-- ================================================
-- RESUMO DA LIMPEZA
-- ================================================

/*
TABELAS DELETADAS:

1. TABELAS VAZIAS:
   - alert_history (0 registros)
   - performance_metrics (0 registros)

2. TABELAS CORE_ MIGRADAS:
   - core_products (dados migrados ‚Üí tenant_business_entities)
   - core_suppliers (dados migrados ‚Üí tenant_business_entities)
   - core_locations (dados migrados ‚Üí tenant_business_entities)
   - core_product_variants (dados migrados ‚Üí tenant_business_entities)
   - abc_analysis (dependente das tabelas core_)

3. TABELAS CORE_ RELACIONADAS:
   - core_orders (migradas ‚Üí tenant_business_transactions)
   - core_documents (migradas ‚Üí tenant_business_transactions)
   - core_movements (migradas ‚Üí tenant_business_transactions)

DADOS PRESERVADOS:
- ‚úÖ Todos os dados est√£o em tenant_business_entities
- ‚úÖ Views de compatibilidade funcionais
- ‚úÖ C√≥digo da aplica√ß√£o funcionando normalmente
- ‚úÖ Backup de seguran√ßa criado

BENEF√çCIOS:
- üöÄ Banco mais limpo e otimizado
- üìä Arquitetura padronizada (apenas tenant_*)
- üîß Manuten√ß√£o simplificada
- üíæ Menor overhead de metadados
- üéØ Estrutura consistente

PR√ìXIMOS PASSOS:
1. Testar aplica√ß√£o completamente
2. Monitorar performance das views de compatibilidade
3. Planejar remo√ß√£o gradual das views de compatibilidade
4. Remover tabelas de backup ap√≥s valida√ß√£o (opcional)
*/ 